package ejemplocup;
import java_cup.runtime.*;
import java.io.FileReader;

parser code {:
      public void report_error(String message, Object info){
            StringBuilder m = new StringBuilder("Error");
            if(info instanceof java_cup.runtime.Symbol){
                  java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                  if(s.left >= 0){
                        m.append(" in line "+ (s.left+1));
                        if(s.right>=0)
                              m.append(", column "+(s.right+1)); 
                  }
            }
            m.append(" : "+message);
            System.err.println(m);
      }

      public void report_fatal_error(String message, Object info){
            report_error(message, info);
            System.exit(1);
      }

      public static void main(String[] args){
            try{
                  AnalizadorSintactico analizer = new AnalizadorSintactico(new AnalizadorLexico(new FileReader(args[0])));
                  Object result = analizer.parse().value;
                  System.out.println("\n***Result finales***");
            }
            catch(Exception ex){
                  ex.printStackTrace(); 
            }
      }
:};

terminal                vip_void, vip_int, vip_double, vip_bool, vip_string, vip_class, vip_interface, vip_null, vip_this, vip_extends;
terminal                vip_implements, vip_for, vip_while, vip_if, vip_else, vip_return, vip_break, vip_New, vip_NewArray, vip_Print;
terminal                vip_ReadInteger, vip_ReadLine, vip_Malloc, vip_GetByte, vip_SetByte, identifier, opt_plus, opt_minus, opt_times;
terminal                opt_divide, opt_mod, opt_lower, opt_lower_equal, opt_greater, opt_greater_equal, opt_assign, opt_equal, opt_not_equal;
terminal                opt_and, opt_or, opt_not, opt_semicolon, opt_dot, opt_coma, opt_left_bracket, opt_right_bracket, opt_left_brace;
terminal                opt_right_brace, opt_left_parentheses, opt_right_parentheses;
terminal                val_bool;
terminal                num_hex;
terminal                num_double, num_int;
terminal                val_string;

non terminal Object     VARIABLELIST, ARLOGOP, PROGRAM, DECL, VARIABLEDECL, FUNCTIONDECL, CLASSDECL, DECLSTAR, INTERFACEDECL, VARIABLE, TYPE, FORMALS, STMTBLOCK, FIELD,
                        EXTENDSIDENTOPTIONAL, IMPLEMENTIDENTPLUSCOMAOPTIONAL, PROTOTYPE, STMT, EXPR, IFSTMT, WHILESTMT, FORSTMT,BREAKSTMT, RETURNSTMT,PRINTSTMT, FIELDSTAR, 
                        VARIABLEDECLSTAR,STMTSTAR,LVALUE, CONSTANT,CALL,ACTUALS,LIBCALL, CM, PROTOTYPESTAR, EXPROPTIONAL, ELSESTMTOPTIONAL, IDENTLIST, EXPRLIST;

precedence left opt_assign;
precedence left opt_plus, opt_minus, opt_times, opt_divide, opt_mod;
precedence left opt_lower, opt_greater, opt_lower_equal, opt_greater_equal, opt_equal, opt_not_equal;
precedence left opt_and, opt_or;
precedence left opt_not, opt_minus;
precedence left opt_left_bracket, opt_dot;
precedence left opt_left_parentheses;
precedence left vip_else;
precedence left identifier;

ARLOGOP ::= opt_plus
      | opt_minus
      | opt_times
      | opt_divide
      | opt_mod 
      | opt_and
      | opt_or
      ;

PROGRAM ::= DECL DECLSTAR
      ;

DECL ::= VARIABLEDECL
      | FUNCTIONDECL
      | CLASSDECL
      | INTERFACEDECL
      | error opt_semicolon
      | error opt_right_brace
      ;

DECLSTAR ::= /*EPSILON*/
      | DECL DECLSTAR
      ;

VARIABLEDECL ::= VARIABLE opt_semicolon
      ;

VARIABLE ::= TYPE identifier
      ;

TYPE ::= vip_int
      | vip_double
      | vip_bool
      | vip_string
      | TYPE opt_left_bracket opt_right_bracket
      ;

FUNCTIONDECL ::= TYPE identifier opt_left_parentheses FORMALS opt_right_parentheses STMTBLOCK
      | vip_void identifier opt_left_parentheses FORMALS opt_right_parentheses STMTBLOCK
      ;

FORMALS ::= VARIABLELIST 
      | /*EPSILON*/
      ;

VARIABLELIST ::= VARIABLE
      | VARIABLELIST opt_coma VARIABLE
      ;

CLASSDECL ::= vip_class identifier EXTENDSIDENTOPTIONAL IMPLEMENTIDENTPLUSCOMAOPTIONAL opt_left_brace FIELDSTAR opt_right_brace
      ;

FIELDSTAR ::= FIELD FIELDSTAR
      | /*EPSILON*/
      ;

EXTENDSIDENTOPTIONAL ::= vip_extends identifier
      | /*EPSILON*/
      ;

IMPLEMENTIDENTPLUSCOMAOPTIONAL ::= vip_implements IDENTLIST
      | /*EPSILON*/
      ;

IDENTLIST ::= identifier
      | IDENTLIST opt_coma identifier
      ;

FIELD ::= VARIABLEDECL
      | FUNCTIONDECL
      ;

INTERFACEDECL ::= vip_interface identifier opt_left_brace PROTOTYPESTAR opt_right_brace
      ;

PROTOTYPESTAR ::= PROTOTYPE PROTOTYPESTAR
      | /*EPSILON*/
      ;

PROTOTYPE ::= TYPE identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon
      | vip_void identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon
      ;

STMT ::= EXPR opt_semicolon
      | opt_semicolon
      | IFSTMT
      | WHILESTMT
      | FORSTMT
      | BREAKSTMT
      | RETURNSTMT
      | PRINTSTMT
      | STMTBLOCK
      ;

STMTBLOCK ::= opt_left_brace VARIABLEDECLSTAR STMTSTAR opt_right_brace
      ;

IFSTMT ::= vip_if opt_left_parentheses EXPR opt_right_parentheses STMT ELSESTMTOPTIONAL 
      ;

ELSESTMTOPTIONAL ::= vip_else STMT 
      | /*EPSILON*/ 
      ;

VARIABLEDECLSTAR ::= VARIABLEDECL VARIABLEDECLSTAR 
      | /*EPSILON*/
      ;

STMTSTAR ::= STMTSTAR STMT 
      | /*EPSILON*/
      ;

WHILESTMT ::= vip_while opt_left_parentheses EXPR opt_right_parentheses STMT 
      ;

FORSTMT ::= vip_for opt_left_parentheses EXPROPTIONAL opt_semicolon EXPR opt_semicolon EXPROPTIONAL opt_right_parentheses STMT
      ;

RETURNSTMT ::= vip_return EXPROPTIONAL opt_semicolon
      ;

BREAKSTMT ::= vip_break opt_semicolon
      ;

PRINTSTMT ::= vip_Print opt_left_parentheses EXPRLIST opt_right_parentheses opt_semicolon
      ;

EXPROPTIONAL ::= EXPR 
      | /*EPSILON*/
      ;

EXPR ::= LVALUE opt_assign EXPR
      | CONSTANT
      | LVALUE 
      | vip_this 
      | CALL
      | opt_left_parentheses EXPR opt_right_parentheses
      | EXPR ARLOGOP EXPR
      | EXPR CM EXPR 
      | opt_minus EXPR 
      | opt_not EXPR 
      | vip_New opt_left_parentheses opt_right_parentheses
      | vip_NewArray  opt_left_parentheses EXPR opt_coma TYPE opt_right_parentheses
      | vip_ReadInteger opt_left_parentheses opt_right_parentheses
      | vip_ReadLine opt_left_parentheses opt_right_parentheses
      | vip_Malloc opt_left_parentheses EXPR opt_right_parentheses
      ;

CM ::= opt_greater 
      | opt_lower
      | opt_greater_equal
      | opt_lower_equal
      | opt_equal
      | opt_not_equal
      ;

LVALUE ::= identifier 
      | EXPR opt_dot identifier
      | EXPR opt_left_bracket EXPR opt_right_bracket
      ;

CALL ::= identifier opt_left_parentheses ACTUALS opt_right_parentheses
      | EXPR opt_dot identifier opt_left_parentheses ACTUALS opt_right_parentheses
      | EXPR opt_dot LIBCALL opt_left_parentheses ACTUALS opt_right_parentheses
      ;

LIBCALL ::= vip_GetByte opt_left_parentheses EXPR opt_right_parentheses
      |  vip_SetByte opt_left_parentheses EXPR opt_coma EXPR opt_right_parentheses
      ;

ACTUALS ::= EXPRLIST 
      | /*EPSILON*/
      ;

EXPRLIST ::= EXPR 
      | EXPRLIST opt_coma EXPR
      ;

CONSTANT ::= num_int
      | num_double
      | val_bool
      | val_string
      | vip_null
      ;