/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * interfaz.java
 *
 * 
 */

package analizador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * 
 */
public class interfaz extends javax.swing.JFrame {

    /** Creates new form interfaz */
    List<identificador> tokenslist;
    public interfaz() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Sentencia");

        jLabel2.setText("Resultado");

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre", "ID"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jButton1)
                        .addGap(44, 44, 44)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(82, 82, 82))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
             probarLexerFile("");
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
        tablaResultado();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextArea2.setText("");
        jTextArea1.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }
    int linea, column, l;
    public String probarLexerFile(String entrada) throws IOException{
        jTextArea2.setText(entrada);
        int contIDs=0;
        
        linea=1;
        column = l =0;
        
        tokenslist = new LinkedList<identificador>();
        File fichero = new File ("fichero.txt");
        PrintWriter writer;
        try {
            writer = new PrintWriter(fichero);
            writer.print(jTextArea2.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reader reader = new BufferedReader(new FileReader("fichero.txt"));
        String stringCode ="";
        try{
            BufferedReader code = new BufferedReader(new FileReader("fichero.txt"));
            String line;
            while((line = code.readLine())!= null){
                stringCode += line+"\n";
            }
            code.close();
        }catch(IOException e){}
        char[] characters = stringCode.toCharArray();
        Lexer lexer = new Lexer (reader);
        String resultado="";
        
        while (true){
            Token token =lexer.yylex();
            int tamano = lexer.yylength();
            if(token == null){
                jTextArea1.setText(resultado);
                return resultado;
            }
            switch (token){
                case ERROR:
                    resultado = resultado + "**Error line "+linea+".*** Unrecognized char: '"+lexer.lexeme+"'\n";
                    column = column + tamano;
                    break;
                case T_Reserved_Word: 
                    resultado = resultado + lexer.lexeme + "\t\tline "+linea+" cols "+(column+1)+"-"+(column+tamano)+" is "+token+"\n";
                    column = column + tamano + 1; 
                    break;
                case T_Comment:
                    comment(characters);
                    break;
                case T_Identifier:
                    if(lexer.lexeme.length()<32){
                        resultado = resultado + lexer.lexeme + "\t\tline "+linea+" cols "+(column+1)+"-"+(column+tamano)+" is "+token+"\n";
                        column = column + tamano + 1; 
                    }
                    else{
                        char[] cadena = lexer.lexeme.toCharArray();
                        String cadenaValida="";
                        for(int i = 0; i<31;i++){
                            cadenaValida+=cadena[i];
                        }
                        resultado = resultado + cadenaValida + "\t\tline "+linea+" cols "+(column+1)+"-"+(column+31)+" is "+token+" (truncated)\n";
                        column = column + tamano + 32;
                    }
                    break;
                case T_BoolConstant: case T_IntConstant: case T_DoubleConstant: 
                    resultado = resultado + lexer.lexeme + "\t\tline "+linea+" cols "+(column+1)+"-"+(column+tamano)+" is "+token+" (value = "+lexer.lexeme+")\n";
                    column = column + tamano + 1; 
                    break;
                case T_StringConstant:
                    resultado = resultado + lexer.lexeme + "\t\tline "+linea+" cols "+(column+1)+"-"+(column+tamano)+" is "+token+" (value = "+lexer.lexeme+")\n";
                    column = column + tamano + 1;
                    break;
                case T_Symbol:
                    resultado = resultado + lexer.lexeme + "\t\tline "+linea+" cols "+(column+1)+"-"+(column+tamano)+" is "+lexer.lexeme+"\n";
                    column=column+tamano + 1;
                    break;
                case newLine:
                    linea = linea + tamano;
                    column = 0;
                    break;
                case SPACE:
                    column = column + tamano;
                    break;
                case TAB:
                    column = column + (tamano*4);
                    break;
                case T_EComment:
                     resultado = resultado + "**Error line "+linea+".*** Comment not finished: "+lexer.lexeme+"\n";
                    break;
                case T_EString:
                    resultado = resultado + "**Error line "+linea+".*** String not finished. \n";
                    break;
            } 
        }
    }
    
    
    private void comment (char[] code){
        if(code[l]=='/' && code[l+1]=='/'){
            linea++;
            return;
        }
        
        for(int i = l;i<code.length;i++){
            if(code[i]=='/'&&code[i+1]=='*'){
                l = i + 2;
                break;
            }
        }
        
        column = column + 2;
        
        for(int i = l;i<code.length;i++){
            if(code[i]=='\n'){
                linea++;
                column = 0;
            }
            else if(code[i] == '*' && code[i+1]=='/'){
                column = column + 2;
                l = i + 2;
                return;
            }
            else{
                column++;
            }
        }
    }
    
    
    public void tablaResultado(){
        Object[][] matriz = new Object [tokenslist.size()][2];
        for(int i =0; i<tokenslist.size();i++){
            matriz[i][0] = tokenslist.get(i).nombre;
            matriz[i][1] = tokenslist.get(i).ID;
        }
        jTable1.setModel(new javax.swing.table.DefaultTableModel(matriz,
            new String [] {
                "Nombre", "ID"
        }
        ));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

}
