package analizador;
//Sintactico.symbolTable.put(lexeme, new symbol("name", "tipo", ambito))
//Java Libraries
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import java.util.List;

parser code {:
    public static Hashtable<String, symbol> symbolTable = new Hashtable<String, symbol>();
    public static List<logs> Log = new  ArrayList<logs>();
    
    public ArrayList<String> SyntacticErrors = new ArrayList<String>();
    public int count = 0;

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m1*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public Hashtable<String, symbol> getHashTable(){
         return symbolTable;
     }
     
     public List<logs> getLog (){
         return Log;
     }
:}

action code {:
                Diccionario exec = new Diccionario();

                public int context = 0, cMin = 0, ambito = 0;
                public String parametros = "", clase = "null", val = "$", cls = "$";
            :}

/*  Symbol Lists  */

// Terminals
terminal pyc, CONST, INT, DOUBLE, BOOL, STRING, OpeningBracket, ClosedBracket, OpeningParenthesis, ClosedParenthesis, sVoid, comma, sClass, OpeningCurlyBracket, ClosedCurlyBracket, sExtends, sImplements, sInterface,
cIf, cElse, lWhile, lFor, sReturn, sBreak, sPrint, assignment, sThis, sNew, sNewArray, sReadInteger, sMalloc, dot, sGetByte, sSetByte, sNull, sReadLine,
ComparisonOperators, equality, negative, sum, ArithmeticOperators, denial, Brackets, and, or, Parenthesis, CurlyBrackets;
terminal Integer    integerConstant;
terminal String     stringConstant, ident, boolConstant;
terminal double     doubleConstant;
 
// Non Terminals
non terminal Program, ProgramA, Decl, VariableDecl, VariableDeclAux, Variable, Type, FunctionDecl, Formals, RepeatVariable, ClassDecl, ExtIdent, ImpIdent, MultipleIdents,
Field, RepeatableField, InterfaceDecl, Prototype, RepeatablePrototype, StmtBlock, Stmt, StmtAux, IfStmt, ElseStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr, ExprOZ, 
ExprRepeat, LValue, Call, LibCall, Actuals, Constant;

/*  Precedence and Associativity declarations   */
precedence left assignment;
precedence left or,and;
precedence nonassoc ComparisonOperators,equality;
precedence left sum,negative,ArithmeticOperators;
precedence nonassoc denial;
precedence nonassoc OpeningBracket,dot;
precedence nonassoc cElse;

/* Grammar */
start with Program;

Program ::= Decl ProgramA;
ProgramA ::= ProgramA Decl| /* epsilon */;

Decl ::=  VariableDecl| 
          FunctionDecl| 
          ClassDecl| 
          InterfaceDecl| 
          error pyc| 
          error ClosedCurlyBracket;

VariableDecl ::= Variable pyc;

Variable ::=  CONST Type:tipo ident:nombre assignment Constant:valor
            {:
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    symbol s = new symbol (nombre.toString(), "const " + tipo.toString(), ambito, clase);
                    s.constante = true;
                    s.SymbolValue(valor.toString());    
                    Sintactico.symbolTable.put(nombre.toString(), s);
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "const " + tipo.toString(), valor.toString(), ambito, clase));
                } 
                RESULT = tipo.toString();
            :}
            | Type:tipo ident:nombre 
            {:
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    Sintactico.symbolTable.put(nombre.toString(), new symbol (nombre.toString(), tipo.toString(), ambito, clase));
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), tipo.toString(), "", ambito, clase));
                } 
                RESULT = tipo.toString();
            :};

Type ::=  INT                   {: RESULT = "int"; :}
        |DOUBLE                 {: RESULT = "double"; :}
        |BOOL                   {: RESULT = "bool"; :}
        |STRING                 {: RESULT = "string"; :}
        |ident:nombre           
        {: 
             if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                RESULT = nombre.toString(); 
             }
             else{
                System.out.println("\033[31m***ERROR: IDENTIFIER "+ nombre.toString() +" DOES NOT EXIST***");
                //throw new Error("Impossible to continue.");
                //RESULT = "";
             }
        :}
        |Type:tipo Brackets {: RESULT = tipo+"[]"; :}
        ;    

FunctionDecl ::= Type:tipo ident:nombre OpeningParenthesis {: ambito++; Sintactico.Log.add(new logs("ﾃ［bito++")); :} Formals ClosedParenthesis {: 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", (ambito - 1), clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, (ambito - 1), clase));
                        parametros = "";
                    }

                 :} StmtBlock
                |sVoid ident:nombre OpeningParenthesis {: ambito++; Sintactico.Log.add(new logs("ﾃ［bito++")); :} Formals ClosedParenthesis {: 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", (ambito - 1), clase);
                        s.AddFunction("void", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, (ambito - 1), clase));
                        Sintactico.Log.add(new logs("ﾃ［bito++"));
                        parametros = "";
                    }

                 :} StmtBlock
                |Type:tipo ident:nombre Parenthesis {: 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

                 :} StmtBlock
                |sVoid ident:nombre Parenthesis {: 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", ambito, clase);
                        s.AddFunction("method", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                        parametros = "";
                    }

                 :}StmtBlock;

Formals ::= Variable:tipo RepeatVariable
        {:
            parametros += tipo.toString()+"$"; 
        :}
        | /* epsilon */;
RepeatVariable ::= comma Variable:tipo RepeatVariable 
        {:
            parametros += tipo.toString()+"$";
        :}
        | /* epsilon */;

ClassDecl ::= sClass ident:nombre ExtIdent ImpIdent {: 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: CLASS "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        clase = nombre.toString();
                        Sintactico.symbolTable.put(clase, new symbol(clase, "class", ambito, clase));
                        Sintactico.Log.add(new logs("INSERT", clase, "class", "", ambito, clase));
                        ambito++; Sintactico.Log.add(new logs("ﾃ［bito++"));
                    }
             :} OpeningCurlyBracket RepeatableField ClosedCurlyBracket {: Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE ﾃ［bito"+ambito)); ambito--; clase = "null"; :}
            | sClass ident:nombre ExtIdent ImpIdent CurlyBrackets{:
                    Sintactico.symbolTable.put(nombre.toString(), new symbol(nombre.toString(), "class", ambito, nombre.toString()));
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "class", "", ambito, nombre.toString()));
                :};
ExtIdent ::= sExtends ident| /* epsilon */;
ImpIdent ::= sImplements MultipleIdents| /* epsilon */;
MultipleIdents ::= ident|MultipleIdents comma ident;
                
RepeatableField ::= RepeatableField Field| /* epsilon */;
Field ::= VariableDecl | FunctionDecl;

InterfaceDecl ::= sInterface ident:nombre OpeningCurlyBracket {: 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: INTERFACE "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        clase = nombre.toString();
                        Sintactico.symbolTable.put(clase, new symbol(clase, "interface", ambito, clase));
                        Sintactico.Log.add(new logs("INSERT", clase, "interface", "", ambito, clase));
                        ambito++; Sintactico.Log.add(new logs("ﾃ［bito++"));
                    }
             :} RepeatablePrototype ClosedCurlyBracket {: Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE ﾃ［bito"+ambito));; ambito--; clase = "null";:}
                | sInterface ident:nombre CurlyBrackets {: 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: INTERFACE "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        Sintactico.symbolTable.put(nombre.toString(), new symbol(nombre.toString(), "interface", ambito, nombre.toString()));
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "interface", "", ambito, nombre.toString()));
                    }
             :};

RepeatablePrototype ::= RepeatablePrototype Prototype| /* epsilon */;
Prototype ::= Type:tipo ident:nombre OpeningParenthesis Formals ClosedParenthesis pyc
            {:
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

            :}
            |sVoid ident:nombre OpeningParenthesis Formals ClosedParenthesis pyc
            {: 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", ambito , clase);
                        s.AddFunction("void", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                        parametros = "";
                    }

                 :}
            |Type:tipo ident:nombre Parenthesis pyc
            {: 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

                 :}
            |sVoid ident:nombre Parenthesis pyc
            {: 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    symbol s = new symbol(nombre.toString(), "method", ambito, clase);
                    s.AddFunction("method", parametros);
                    Sintactico.symbolTable.put(nombre.toString(), s);
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                    parametros = "";
                }

             :};

StmtBlock ::= OpeningCurlyBracket VariableDeclAux StmtAux ClosedCurlyBracket {: Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE ﾃ［bito"+ambito));; ambito--;:}
            | CurlyBrackets;
VariableDeclAux ::= VariableDeclAux VariableDecl| /* epsilon */;
StmtAux ::= Stmt StmtAux| /* epsilon */ ;

Stmt ::= Expr pyc
        |pyc
        |IfStmt
        |WhileStmt
        |ForStmt 
        |BreakStmt
        |ReturnStmt 
        |PrintStmt 
        |StmtBlock;
ExprOZ ::= Expr| /* epsilon */ ;

IfStmt ::= cIf OpeningParenthesis Expr ClosedParenthesis {: ambito++; Sintactico.Log.add(new logs("ﾃ［bito++")); :} Stmt {: Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE ﾃ［bito"+ambito));; ambito--; :} ElseStmt;
ElseStmt ::= cElse {: ambito++; Sintactico.Log.add(new logs("ﾃ［bito++")); :} Stmt {: Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE ﾃ［bito"+ambito));; ambito--; :}
        | /* epsilon */ ;

WhileStmt ::= lWhile OpeningParenthesis Expr ClosedParenthesis {: ambito++; Sintactico.Log.add(new logs("ﾃ［bito++")); :} Stmt {: Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE ﾃ［bito"+ambito));; ambito--; :};

ForStmt ::= lFor OpeningParenthesis ExprOZ pyc  Expr pyc ExprOZ ClosedParenthesis {: ambito++; Sintactico.Log.add(new logs("ﾃ［bito++")); :} Stmt {: Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE ﾃ［bito"+ambito));; ambito--; :};

ReturnStmt ::= sReturn ExprOZ pyc;

BreakStmt ::= sBreak pyc;

PrintStmt ::= sPrint OpeningParenthesis Expr ExprRepeat ClosedParenthesis pyc;
ExprRepeat ::= comma Expr:simbolo ExprRepeat{: 
            if(exec.AlreadyExists(Sintactico.symbolTable, simbolo.toString(), ambito, cMin)){
                symbol s = exec.FindSymbol(Sintactico.symbolTable, simbolo.toString(), ambito, cMin);
                parametros = s.type + "$";
            }else 
                System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo.toString() +" DOES NOT EXIST***");
        :}| /* epsilon */ ;

Expr ::= LValue:nombre1 assignment Expr:nombre2
        |Constant:valor {: RESULT = valor.toString(); :}
        |LValue:nombre {: RESULT = nombre.toString(); :}
        |sThis
        |Call 
        |OpeningParenthesis Expr ClosedParenthesis
        |Expr ArithmeticOperators Expr
        |Expr sum Expr
        |Expr negative Expr
        |Expr and Expr 
        |Expr or Expr
        |Expr equality Expr
        |Expr ComparisonOperators Expr
        |negative Expr 
        |denial Expr
        |sNew OpeningParenthesis ident ClosedParenthesis
        |sNewArray OpeningParenthesis Expr comma Type ClosedParenthesis
        |sReadInteger OpeningParenthesis ClosedParenthesis
        |sReadInteger Parenthesis
        |sReadLine Parenthesis
        |sReadLine OpeningParenthesis ClosedParenthesis
        |sMalloc OpeningParenthesis Expr ClosedParenthesis;

LValue ::= ident:nombre {: 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                     
                }
                else
                    System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" IS ALREADY EXIST***");
                RESULT = nombre.toString();
            :}
           |Expr:simbolo dot ident:nombre  {: 
                if(exec.AlreadyExists(Sintactico.symbolTable, simbolo.toString(), ambito, cMin)){
                    if(exec.FindInLogs(Sintactico.Log, nombre, simbolo.toString())){
                        val = "log";
                        cls = simbolo.toString();
                    }
                    else
                         System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" DOES NOT EXIST***");
                }
                else 
                     System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" DOES NOT EXIST***");
                 RESULT = nombre.toString();
            :}
           |Expr:simbolo1 OpeningBracket Expr:simbolo2 ClosedBracket {: 
                if(exec.AlreadyExists(Sintactico.symbolTable, simbolo1.toString(), ambito, cMin)){
                    if(exec.AlreadyExists(Sintactico.symbolTable, simbolo2.toString(), ambito, cMin)){
                        val = "array";
                        symbol s = exec.FindSymbol(Sintactico.symbolTable, simbolo2.toString(), ambito, cMin);
                        cls = s.value;
                    }
                    else 
                     System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo2.toString() +" DOES NOT EXIST***");
                }
                else 
                     System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo1.toString() +" DOES NOT EXIST***");
                 RESULT = simbolo1.toString();
            :};

Call ::= ident:nombre OpeningParenthesis Actuals ClosedParenthesis {: 
            if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                symbol s = exec.FindFunction(Sintactico.symbolTable, nombre.toString());
                if(s.parametros != parametros){
                    System.out.println("\033[31m***ERROR: "+ nombre.toString() +" PARAMETERS DO NOT MATCH.***");
                }
            }
            else
                System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" DOES NOT EXIST***");
            parametros = "";
            RESULT = nombre.toString();       
        :}
        |ident:nombre Parenthesis{: 
            if(!exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" DOES NOT EXIST***");
            }
            RESULT = nombre.toString();       
        :}
        |Expr:simbolo dot ident:nombre OpeningParenthesis Actuals ClosedParenthesis
        |Expr:simbolo dot ident:nombre Parenthesis
        |Expr:simbolo dot LibCall OpeningParenthesis Actuals ClosedParenthesis
        |Expr:simbolo dot LibCall Parenthesis;

LibCall ::= sGetByte OpeningParenthesis Expr ClosedParenthesis
            |sSetByte OpeningParenthesis Expr comma Expr ClosedParenthesis;

Actuals ::= Expr:simbolo ExprRepeat {: 
            if(exec.AlreadyExists(Sintactico.symbolTable, simbolo.toString(), ambito, cMin)){
                symbol s = exec.FindSymbol(Sintactico.symbolTable, simbolo.toString(), ambito, cMin);
                parametros = s.type + "$";
            }else 
                System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo.toString() +" DOES NOT EXIST***");
        :}| /* epsilon */ ;

//Constant ::= intConstant | doubleConstant | boolConstant | stringConstant | null
Constant ::= integerConstant:valor {: Sintactico.symbolTable.put(valor.toString(), new symbol(valor.toString(), "int", ambito, clase, valor.toString())); RESULT = valor.toString();:}
            |doubleConstant:valor {: Sintactico.symbolTable.put(Double.toString(valor), new symbol(Double.toString(valor), "double", ambito, clase, Double.toString(valor))); RESULT = Double.toString(valor);:}
            |boolConstant:valor {: Sintactico.symbolTable.put(valor.toString(), new symbol(valor.toString(), "bool", ambito, clase, valor.toString())); RESULT = valor.toString();:}
            |stringConstant:valor {: Sintactico.symbolTable.put(valor, new symbol(valor.toString(), "string", ambito, clase, valor)); RESULT = valor;:}
            |sNull {: Sintactico.symbolTable.put("null", new symbol("null", "string", ambito, clase, "null")); RESULT = "null";:}
            ;