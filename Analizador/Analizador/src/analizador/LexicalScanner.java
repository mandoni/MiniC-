/* The following code was generated by JFlex 1.4.3 on 17/11/18 17:22 */

/* User code */
package analizador;

//Java Libraries

import java.util.ArrayList;
import java_cup.runtime.Symbol;

class Yytoken{
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;

    Yytoken(String token, int line, int column, String type, boolean error){
        this.token = token;
        this.line = line+1;
        this.column = column+1;
        this.length = token.length()-1;
        this.type = type;
        this.error = error;
    }

    public String toString(){
        int aux = column + length;
        if(this.type.equals("T_Identifier")){
            if(token.length() > 31){
                String temp = this.token.substring(0,31);
                String aditional = this.token.substring(31);
                return temp + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type + " Number of characters greater than 31 - Discarded characters {"+aditional+"}";
            }
            else{
                return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
            }
        }
        else{
            return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
        }   
    }

    public String isError(){
        int aux = column + length;
        return "*** Error LÃ©xico. Linea: " +line+ " Columnas: "+column+"-"+aux+" *** Mensaje Error: " + type + " \'" + token +"\'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/11/18 17:22 from the specification file
 * <tt>C:/Users/TonyTaze/Downloads/Universidad/Sexto Ciclo/COMPILADORES/MiniC-/Analizador/Analizador/src/analizador/Lexer.flex</tt>
 */
public class LexicalScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\45\1\0\1\50\1\44\22\0\1\46\1\70\1\62"+
    "\2\0\1\64\1\71\1\0\1\73\1\74\1\52\1\65\1\102\1\60"+
    "\1\57\1\51\1\54\11\53\1\0\1\101\1\66\1\67\1\66\2\0"+
    "\1\30\1\37\2\56\1\61\1\56\1\36\1\42\1\33\2\42\1\34"+
    "\1\35\1\27\1\42\1\24\1\42\1\32\1\40\4\42\1\55\2\42"+
    "\1\75\1\63\1\76\1\0\1\43\1\0\1\22\1\7\1\21\1\4"+
    "\1\11\1\15\1\14\1\17\1\1\1\42\1\41\1\10\1\25\1\2"+
    "\1\5\1\26\1\42\1\13\1\12\1\3\1\6\1\20\1\16\1\23"+
    "\1\31\1\42\1\77\1\72\1\100\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\23\2\3\3\2\4\2\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\2\1\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\26\2\1\3\1\25\1\26\3\0\1\27\1\0\1\11"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\13\2"+
    "\1\37\5\2\1\40\4\2\3\0\1\5\1\0\2\2"+
    "\1\41\1\42\1\43\1\2\1\44\1\2\1\45\4\2"+
    "\1\46\7\2\1\26\1\0\3\2\1\47\3\2\1\50"+
    "\1\51\1\52\10\2\1\53\1\2\1\54\1\55\3\2"+
    "\1\56\4\2\1\57\3\2\1\60\1\61\2\2\1\62"+
    "\1\2\1\63\1\64\2\2\1\65\1\2\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\103\0\u05c2"+
    "\0\u0605\0\103\0\u0648\0\u068b\0\103\0\u06ce\0\u0711\0\u06ce"+
    "\0\u0754\0\u0797\0\u0797\0\u07da\0\u081d\0\u0860\0\103\0\u08a3"+
    "\0\103\0\u08e6\0\103\0\103\0\103\0\u0929\0\u0192\0\u096c"+
    "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u0711\0\103\0\u107d\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u0192\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u0ff7\0\u174b"+
    "\0\u178e\0\u17d1\0\u0192\0\u0192\0\u0192\0\u1814\0\u0192\0\u1857"+
    "\0\u0192\0\u189a\0\u18dd\0\u1920\0\u1963\0\u0192\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u0192\0\u1c87\0\u1cca\0\u1d0d\0\u0192\0\u0192"+
    "\0\u0192\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u0192\0\u1f68\0\u0192\0\u0192\0\u1fab\0\u1fee\0\u2031"+
    "\0\u0192\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u0192\0\u2180\0\u21c3"+
    "\0\u2206\0\u0192\0\u0192\0\u2249\0\u228c\0\u0192\0\u22cf\0\u0192"+
    "\0\u0192\0\u2312\0\u2355\0\u0192\0\u2398\0\u0192";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\7\1\14\1\15\1\7\1\16"+
    "\1\17\2\7\1\20\2\7\1\21\2\7\1\22\2\7"+
    "\1\23\1\24\1\7\1\25\2\7\1\2\1\26\2\27"+
    "\1\30\1\2\1\31\1\32\1\33\1\34\2\7\1\35"+
    "\1\36\1\7\1\37\1\2\1\32\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\104\0\1\7\1\56\12\7\1\57"+
    "\7\7\1\60\16\7\7\0\4\7\2\0\1\7\22\0"+
    "\5\7\1\61\35\7\7\0\4\7\2\0\1\7\22\0"+
    "\12\7\1\62\3\7\1\63\24\7\7\0\4\7\2\0"+
    "\1\7\22\0\4\7\1\64\36\7\7\0\4\7\2\0"+
    "\1\7\22\0\43\7\7\0\4\7\2\0\1\7\22\0"+
    "\4\7\1\65\5\7\1\66\30\7\7\0\4\7\2\0"+
    "\1\7\22\0\7\7\1\67\12\7\1\70\20\7\7\0"+
    "\4\7\2\0\1\7\22\0\2\7\1\71\40\7\7\0"+
    "\4\7\2\0\1\7\22\0\10\7\1\72\32\7\7\0"+
    "\4\7\2\0\1\7\22\0\4\7\1\73\14\7\1\74"+
    "\21\7\7\0\4\7\2\0\1\7\22\0\16\7\1\75"+
    "\24\7\7\0\4\7\2\0\1\7\22\0\4\7\1\76"+
    "\36\7\7\0\4\7\2\0\1\7\22\0\7\7\1\77"+
    "\33\7\7\0\4\7\2\0\1\7\22\0\12\7\1\100"+
    "\30\7\7\0\4\7\2\0\1\7\22\0\10\7\1\101"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\10\7\1\102"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\21\7\1\103"+
    "\21\7\7\0\4\7\2\0\1\7\22\0\10\7\1\104"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\10\7\1\105"+
    "\32\7\7\0\4\7\2\0\1\7\66\0\1\27\105\0"+
    "\1\27\103\0\1\106\1\107\103\0\2\33\2\0\1\110"+
    "\46\0\1\111\27\0\2\33\1\111\1\0\1\110\76\0"+
    "\2\112\26\0\45\113\1\0\14\113\1\114\1\115\17\113"+
    "\67\0\1\116\102\0\1\117\104\0\1\120\103\0\1\121"+
    "\104\0\1\122\104\0\1\123\104\0\1\124\3\0\2\7"+
    "\1\125\40\7\7\0\4\7\2\0\1\7\22\0\25\7"+
    "\1\126\15\7\7\0\4\7\2\0\1\7\22\0\7\7"+
    "\1\127\33\7\7\0\4\7\2\0\1\7\22\0\5\7"+
    "\1\130\35\7\7\0\4\7\2\0\1\7\22\0\1\131"+
    "\42\7\7\0\4\7\2\0\1\7\22\0\5\7\1\132"+
    "\35\7\7\0\4\7\2\0\1\7\22\0\4\7\1\133"+
    "\36\7\7\0\4\7\2\0\1\7\22\0\10\7\1\134"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\11\7\1\135"+
    "\31\7\7\0\4\7\2\0\1\7\22\0\2\7\1\136"+
    "\40\7\7\0\4\7\2\0\1\7\22\0\12\7\1\137"+
    "\30\7\7\0\4\7\2\0\1\7\22\0\2\7\1\140"+
    "\40\7\7\0\4\7\2\0\1\7\22\0\12\7\1\141"+
    "\30\7\7\0\4\7\2\0\1\7\22\0\7\7\1\142"+
    "\33\7\7\0\4\7\2\0\1\7\22\0\1\143\42\7"+
    "\7\0\4\7\2\0\1\7\22\0\1\144\42\7\7\0"+
    "\4\7\2\0\1\7\22\0\21\7\1\145\21\7\7\0"+
    "\4\7\2\0\1\7\22\0\1\146\42\7\7\0\4\7"+
    "\2\0\1\7\22\0\15\7\1\147\25\7\7\0\4\7"+
    "\2\0\1\7\22\0\21\7\1\150\21\7\7\0\4\7"+
    "\2\0\1\7\22\0\7\7\1\151\33\7\7\0\4\7"+
    "\2\0\1\7\22\0\2\7\1\152\40\7\7\0\4\7"+
    "\2\0\1\7\22\0\2\7\1\153\40\7\7\0\4\7"+
    "\2\0\1\7\21\0\44\106\1\26\1\27\35\106\51\107"+
    "\1\154\1\155\30\107\11\0\1\156\41\0\2\110\4\0"+
    "\1\156\25\0\1\157\2\0\1\157\1\0\1\157\3\0"+
    "\1\157\3\0\2\157\5\0\1\157\6\0\1\157\13\0"+
    "\2\157\1\0\1\157\2\0\1\157\74\0\2\112\2\0"+
    "\1\160\23\0\45\113\1\0\35\113\1\0\10\7\1\161"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\7\7\1\162"+
    "\33\7\7\0\4\7\2\0\1\7\22\0\7\7\1\163"+
    "\33\7\7\0\4\7\2\0\1\7\22\0\10\7\1\164"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\11\7\1\165"+
    "\31\7\7\0\4\7\2\0\1\7\22\0\6\7\1\166"+
    "\34\7\7\0\4\7\2\0\1\7\22\0\7\7\1\167"+
    "\33\7\7\0\4\7\2\0\1\7\22\0\21\7\1\170"+
    "\21\7\7\0\4\7\2\0\1\7\22\0\10\7\1\171"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\10\7\1\172"+
    "\32\7\7\0\4\7\2\0\1\7\22\0\1\173\42\7"+
    "\7\0\4\7\2\0\1\7\22\0\5\7\1\174\35\7"+
    "\7\0\4\7\2\0\1\7\22\0\11\7\1\130\31\7"+
    "\7\0\4\7\2\0\1\7\22\0\7\7\1\175\33\7"+
    "\7\0\4\7\2\0\1\7\22\0\3\7\1\176\37\7"+
    "\7\0\4\7\2\0\1\7\22\0\11\7\1\177\31\7"+
    "\7\0\4\7\2\0\1\7\22\0\1\7\1\200\41\7"+
    "\7\0\4\7\2\0\1\7\22\0\27\7\1\201\13\7"+
    "\7\0\4\7\2\0\1\7\22\0\3\7\1\202\37\7"+
    "\7\0\4\7\2\0\1\7\22\0\7\7\1\203\33\7"+
    "\7\0\4\7\2\0\1\7\22\0\36\7\1\204\4\7"+
    "\7\0\4\7\2\0\1\7\22\0\36\7\1\205\4\7"+
    "\7\0\4\7\2\0\1\7\21\0\52\154\1\155\101\154"+
    "\1\27\1\155\30\154\53\0\2\206\3\0\1\207\4\0"+
    "\1\207\26\0\1\156\41\0\2\160\4\0\1\156\22\0"+
    "\12\7\1\210\30\7\7\0\4\7\2\0\1\7\22\0"+
    "\10\7\1\211\32\7\7\0\4\7\2\0\1\7\22\0"+
    "\7\7\1\212\33\7\7\0\4\7\2\0\1\7\22\0"+
    "\40\7\1\213\2\7\7\0\4\7\2\0\1\7\22\0"+
    "\1\7\1\214\41\7\7\0\4\7\2\0\1\7\22\0"+
    "\1\7\1\215\41\7\7\0\4\7\2\0\1\7\22\0"+
    "\12\7\1\216\30\7\7\0\4\7\2\0\1\7\22\0"+
    "\10\7\1\217\32\7\7\0\4\7\2\0\1\7\22\0"+
    "\11\7\1\220\31\7\7\0\4\7\2\0\1\7\22\0"+
    "\2\7\1\221\40\7\7\0\4\7\2\0\1\7\22\0"+
    "\12\7\1\222\30\7\7\0\4\7\2\0\1\7\22\0"+
    "\32\7\1\223\1\224\7\7\7\0\4\7\2\0\1\7"+
    "\22\0\4\7\1\225\36\7\7\0\4\7\2\0\1\7"+
    "\22\0\30\7\1\226\12\7\7\0\4\7\2\0\1\7"+
    "\22\0\30\7\1\227\12\7\7\0\4\7\2\0\1\7"+
    "\74\0\2\206\27\0\14\7\1\230\26\7\7\0\4\7"+
    "\2\0\1\7\22\0\24\7\1\231\16\7\7\0\4\7"+
    "\2\0\1\7\22\0\10\7\1\232\32\7\7\0\4\7"+
    "\2\0\1\7\22\0\3\7\1\233\37\7\7\0\4\7"+
    "\2\0\1\7\22\0\13\7\1\234\27\7\7\0\4\7"+
    "\2\0\1\7\22\0\1\7\1\235\41\7\7\0\4\7"+
    "\2\0\1\7\22\0\12\7\1\236\30\7\7\0\4\7"+
    "\2\0\1\7\22\0\1\7\1\237\41\7\7\0\4\7"+
    "\2\0\1\7\22\0\1\240\42\7\7\0\4\7\2\0"+
    "\1\7\22\0\20\7\1\241\22\7\7\0\4\7\2\0"+
    "\1\7\22\0\2\7\1\242\40\7\7\0\4\7\2\0"+
    "\1\7\22\0\2\7\1\243\40\7\7\0\4\7\2\0"+
    "\1\7\22\0\21\7\1\244\21\7\7\0\4\7\2\0"+
    "\1\7\22\0\10\7\1\245\32\7\7\0\4\7\2\0"+
    "\1\7\22\0\11\7\1\246\31\7\7\0\4\7\2\0"+
    "\1\7\22\0\21\7\1\247\21\7\7\0\4\7\2\0"+
    "\1\7\22\0\2\7\1\250\40\7\7\0\4\7\2\0"+
    "\1\7\22\0\1\7\1\251\41\7\7\0\4\7\2\0"+
    "\1\7\22\0\10\7\1\252\32\7\7\0\4\7\2\0"+
    "\1\7\22\0\10\7\1\253\32\7\7\0\4\7\2\0"+
    "\1\7\22\0\20\7\1\254\22\7\7\0\4\7\2\0"+
    "\1\7\22\0\1\7\1\255\41\7\7\0\4\7\2\0"+
    "\1\7\22\0\30\7\1\256\12\7\7\0\4\7\2\0"+
    "\1\7\22\0\10\7\1\257\32\7\7\0\4\7\2\0"+
    "\1\7\22\0\10\7\1\260\32\7\7\0\4\7\2\0"+
    "\1\7\22\0\10\7\1\261\32\7\7\0\4\7\2\0"+
    "\1\7\22\0\2\7\1\262\40\7\7\0\4\7\2\0"+
    "\1\7\22\0\13\7\1\263\27\7\7\0\4\7\2\0"+
    "\1\7\22\0\11\7\1\264\31\7\7\0\4\7\2\0"+
    "\1\7\22\0\10\7\1\265\32\7\7\0\4\7\2\0"+
    "\1\7\22\0\12\7\1\266\30\7\7\0\4\7\2\0"+
    "\1\7\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9179];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\2\1\1\11\2\1\1\11"+
    "\11\1\1\11\1\1\1\11\1\1\3\11\33\1\3\0"+
    "\1\11\1\0\7\11\27\1\3\0\1\1\1\0\26\1"+
    "\1\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private Symbol symbol(int type){
    return new Symbol(type, yyline, yycolumn, yytext());
}

private Symbol symbol(int type, Object value){
    return new Symbol(type, yyline, yycolumn, value);
}

public ArrayList<Yytoken> tokens; /* our variable for storing token's info that will be the output */

private String typeReservedWords(String text){
    return  "T_" + text.substring(0, 1).toUpperCase() + text.substring(1);
}

private String typeNumbers(String text, String type){
    return type + " (value = " + text + ")";
}

private String isError(String token, int line, int column, int length, String error){
    int aux = column + length;
    return "*** Line " +line+ " *** Cols "+column+"-"+aux+" *** " + error + " \'" + token +"\'";
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { /* ignore */
          }
        case 55: break;
        case 23: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_String"), false)); return symbol(sym.stringConstant);
          }
        case 56: break;
        case 4: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ArithmeticOperators);
          }
        case 57: break;
        case 42: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sPrint);
          }
        case 58: break;
        case 17: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedCurlyBracket);
          }
        case 59: break;
        case 13: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedParenthesis);
          }
        case 60: break;
        case 9: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ComparisonOperators);
          }
        case 61: break;
        case 22: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_DoubleConstant"), false)); return symbol(sym.doubleConstant);
          }
        case 62: break;
        case 51: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sReadLine);
          }
        case 63: break;
        case 5: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_IntConstant"), false)); return symbol(sym.integerConstant);
          }
        case 64: break;
        case 16: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningCurlyBracket);
          }
        case 65: break;
        case 29: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.CurlyBrackets);
          }
        case 66: break;
        case 48: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sGetByte);
          }
        case 67: break;
        case 40: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.lWhile);
          }
        case 68: break;
        case 11: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.denial);
          }
        case 69: break;
        case 41: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sClass);
          }
        case 70: break;
        case 54: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sReadInteger);
          }
        case 71: break;
        case 49: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sSetByte);
          }
        case 72: break;
        case 33: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sNull);
          }
        case 73: break;
        case 28: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Brackets);
          }
        case 74: break;
        case 1: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Unrecognized char", true)); /* It's error so it doesn't return nothing */
          }
        case 75: break;
        case 52: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sInterface);
          }
        case 76: break;
        case 7: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.negative);
          }
        case 77: break;
        case 34: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_LogicalConstant", false)); return symbol(sym.boolConstant);
          }
        case 78: break;
        case 50: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sNewArray);
          }
        case 79: break;
        case 18: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.pyc);
          }
        case 80: break;
        case 15: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedBracket);
          }
        case 81: break;
        case 24: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.equality);
          }
        case 82: break;
        case 43: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.DOUBLE);
          }
        case 83: break;
        case 2: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return symbol(sym.ident);
          }
        case 84: break;
        case 20: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.cIf);
          }
        case 85: break;
        case 32: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sNew);
          }
        case 86: break;
        case 14: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningBracket);
          }
        case 87: break;
        case 53: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sImplements);
          }
        case 88: break;
        case 10: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.assignment);
          }
        case 89: break;
        case 19: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.comma);
          }
        case 90: break;
        case 6: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.dot);
          }
        case 91: break;
        case 46: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sMalloc);
          }
        case 92: break;
        case 45: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sReturn);
          }
        case 93: break;
        case 47: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sExtends);
          }
        case 94: break;
        case 27: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Parenthesis);
          }
        case 95: break;
        case 21: 
          { this.tokens.add(new Yytoken("", yyline, yycolumn, "The character '*/' wasn't found", true)); /* It's error so it doesn't return nothing */
          }
        case 96: break;
        case 30: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.INT);
          }
        case 97: break;
        case 37: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.cElse);
          }
        case 98: break;
        case 31: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.lFor);
          }
        case 99: break;
        case 39: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sBreak);
          }
        case 100: break;
        case 38: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sVoid);
          }
        case 101: break;
        case 12: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningParenthesis);
          }
        case 102: break;
        case 44: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.STRING);
          }
        case 103: break;
        case 8: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.sum);
          }
        case 104: break;
        case 36: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.BOOL);
          }
        case 105: break;
        case 25: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.and);
          }
        case 106: break;
        case 35: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sThis);
          }
        case 107: break;
        case 26: 
          { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.or);
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
