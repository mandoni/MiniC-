
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 18 22:01:37 CST 2018
//----------------------------------------------------

package analizador;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 18 22:01:37 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\005\004\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\004\000\002\047\002" +
    "\000\002\050\002\000\002\011\012\000\002\051\002\000" +
    "\002\052\002\000\002\011\012\000\002\053\002\000\002" +
    "\011\007\000\002\054\002\000\002\011\007\000\002\012" +
    "\004\000\002\012\002\000\002\013\005\000\002\013\002" +
    "\000\002\055\002\000\002\014\012\000\002\014\007\000" +
    "\002\015\004\000\002\015\002\000\002\016\004\000\002" +
    "\016\002\000\002\017\003\000\002\017\005\000\002\021" +
    "\004\000\002\021\002\000\002\020\003\000\002\020\003" +
    "\000\002\056\002\000\002\022\010\000\002\022\005\000" +
    "\002\024\004\000\002\024\002\000\002\023\010\000\002" +
    "\023\010\000\002\023\006\000\002\023\006\000\002\025" +
    "\006\000\002\025\003\000\002\006\004\000\002\006\002" +
    "\000\002\027\004\000\002\027\002\000\002\026\004\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\040\003\000\002\040\002" +
    "\000\002\057\002\000\002\060\002\000\002\030\012\000" +
    "\002\061\002\000\002\031\005\000\002\031\002\000\002" +
    "\062\002\000\002\032\010\000\002\063\002\000\002\033" +
    "\014\000\002\034\005\000\002\035\004\000\002\036\010" +
    "\000\002\041\005\000\002\041\002\000\002\037\005\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\004\000" +
    "\002\037\004\000\002\037\006\000\002\037\010\000\002" +
    "\037\005\000\002\037\004\000\002\037\004\000\002\037" +
    "\005\000\002\037\006\000\002\042\003\000\002\042\005" +
    "\000\002\042\006\000\002\043\006\000\002\043\004\000" +
    "\002\043\010\000\002\043\006\000\002\043\010\000\002" +
    "\043\006\000\002\044\006\000\002\044\010\000\002\045" +
    "\004\000\002\045\002\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\024\003\022\005\005\006\020\007\013\010" +
    "\017\015\023\017\014\024\021\064\015\001\002\000\006" +
    "\055\173\064\350\001\002\000\010\014\ufff5\055\ufff5\064" +
    "\ufff5\001\002\000\026\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\015\ufffa\017\ufffa\024\ufffa\064\ufffa\001" +
    "\002\000\026\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\015\ufffd\017\ufffd\024\ufffd\064\ufffd\001\002\000" +
    "\026\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\015\ufffe\017\ufffe\024\ufffe\064\ufffe\001\002\000\004\004" +
    "\345\001\002\000\004\002\344\001\002\000\010\014\ufff3" +
    "\055\ufff3\064\ufff3\001\002\000\004\064\322\001\002\000" +
    "\010\014\ufff1\055\ufff1\064\ufff1\001\002\000\026\002\ufffb" +
    "\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\015\ufffb\017" +
    "\ufffb\024\ufffb\064\ufffb\001\002\000\010\014\ufff2\055\ufff2" +
    "\064\ufff2\001\002\000\010\014\ufff4\055\ufff4\064\ufff4\001" +
    "\002\000\004\064\273\001\002\000\006\004\271\021\272" +
    "\001\002\000\004\064\025\001\002\000\026\002\ufffc\003" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\015\ufffc\017\ufffc" +
    "\024\ufffc\064\ufffc\001\002\000\006\013\026\060\027\001" +
    "\002\000\016\005\uffec\006\uffec\007\uffec\010\uffec\014\uffec" +
    "\064\uffec\001\002\000\006\020\uffe7\061\uffe7\001\002\000" +
    "\006\020\031\061\032\001\002\000\074\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\013\uffc8\020\uffc8\021\uffc8\025" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\045\uffc8\046\uffc8\051" +
    "\uffc8\054\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\110\002\uffca\003\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\013\uffca\015\uffca\017\uffca" +
    "\020\uffca\021\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\045\uffca\046\uffca\051\uffca\054\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\001\002" +
    "\000\030\002\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\015\uffe6\017\uffe6\021\uffe6\024\uffe6\064\uffe6\001\002" +
    "\000\074\004\056\005\005\006\020\007\013\010\017\013" +
    "\046\020\031\021\uffc6\025\064\027\043\030\072\031\065" +
    "\032\060\033\101\035\054\036\100\037\063\040\053\041" +
    "\036\045\062\046\052\051\047\054\044\061\032\062\071" +
    "\063\045\064\055\065\050\066\041\001\002\000\066\004" +
    "\uffbf\013\uffbf\020\uffbf\021\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\045\uffbf\046\uffbf\051\uffbf\054\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001" +
    "\002\000\004\013\254\001\002\000\034\004\uffaa\011\uffaa" +
    "\012\uffaa\014\uffaa\016\uffaa\042\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\056\uffaa\057\uffaa\001\002\000\066" +
    "\004\uffc1\013\uffc1\020\uffc1\021\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\045\uffc1\046\uffc1\051\uffc1\054" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\001\002\000\034\004\uff87\011\uff87\012\uff87\014\uff87\016" +
    "\uff87\042\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87" +
    "\056\uff87\057\uff87\001\002\000\066\004\uffbe\013\uffbe\020" +
    "\uffbe\021\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\045\uffbe\046\uffbe\051\uffbe\054\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000\004\013" +
    "\247\001\002\000\040\013\046\035\054\036\100\037\063" +
    "\040\053\041\036\045\062\046\052\051\047\054\044\062" +
    "\071\063\045\064\104\065\050\066\041\001\002\000\034" +
    "\004\uff85\011\uff85\012\uff85\014\uff85\016\uff85\042\uff85\047" +
    "\uff85\050\uff85\051\uff85\052\uff85\053\uff85\056\uff85\057\uff85" +
    "\001\002\000\040\013\046\035\054\036\100\037\063\040" +
    "\053\041\036\045\062\046\052\051\047\054\044\062\071" +
    "\063\045\064\104\065\050\066\041\001\002\000\040\013" +
    "\046\035\054\036\100\037\063\040\053\041\036\045\062" +
    "\046\052\051\047\054\044\062\071\063\045\064\104\065" +
    "\050\066\041\001\002\000\034\004\uff86\011\uff86\012\uff86" +
    "\014\uff86\016\uff86\042\uff86\047\uff86\050\uff86\051\uff86\052" +
    "\uff86\053\uff86\056\uff86\057\uff86\001\002\000\066\004\uffc2" +
    "\013\uffc2\020\uffc2\021\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\045\uffc2\046\uffc2\051\uffc2\054\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002" +
    "\000\006\013\240\060\241\001\002\000\006\013\235\060" +
    "\236\001\002\000\034\004\uffa8\011\uffa8\012\uffa8\014\uffa8" +
    "\016\uffa8\042\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\056\uffa8\057\uffa8\001\002\000\040\004\uff95\011\uff95" +
    "\013\105\034\uff95\042\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\055\ufff1\056\uff95\057\uff95\060\106\064\ufff1" +
    "\001\002\000\066\004\uffc4\013\uffc4\020\uffc4\021\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\045\uffc4\046" +
    "\uffc4\051\uffc4\054\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\001\002\000\066\004\uffbd\013\uffbd\020" +
    "\uffbd\021\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\045\uffbd\046\uffbd\051\uffbd\054\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\004\004" +
    "\234\001\002\000\066\004\uffc3\013\uffc3\020\uffc3\021\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\045\uffc3" +
    "\046\uffc3\051\uffc3\054\uffc3\061\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\001\002\000\034\004\uff84\011\uff84" +
    "\012\uff84\014\uff84\016\uff84\042\uff84\047\uff84\050\uff84\051" +
    "\uff84\052\uff84\053\uff84\056\uff84\057\uff84\001\002\000\004" +
    "\013\227\001\002\000\004\013\215\001\002\000\042\004" +
    "\uffbb\013\046\035\054\036\100\037\063\040\053\041\036" +
    "\045\062\046\052\051\047\054\044\062\071\063\045\064" +
    "\104\065\050\066\041\001\002\000\026\004\212\011\112" +
    "\042\113\047\115\050\122\051\116\052\121\053\111\056" +
    "\120\057\117\001\002\000\036\004\uffa9\011\uffa9\012\uffa9" +
    "\014\uffa9\016\uffa9\034\210\042\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\056\uffa9\057\uffa9\001\002\000\074" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\013\uffc9\020" +
    "\uffc9\021\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\045" +
    "\uffc9\046\uffc9\051\uffc9\054\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\001\002\000\034\004\uff88\011" +
    "\uff88\012\uff88\014\uff88\016\uff88\042\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\056\uff88\057\uff88\001\002\000" +
    "\004\013\176\001\002\000\064\004\056\013\046\020\031" +
    "\021\uffc6\025\064\027\043\030\072\031\065\032\060\033" +
    "\101\035\054\036\100\037\063\040\053\041\036\045\062" +
    "\046\052\051\047\054\044\061\032\062\071\063\045\064" +
    "\104\065\050\066\041\001\002\000\006\055\173\064\174" +
    "\001\002\000\004\021\172\001\002\000\034\004\uffa7\011" +
    "\uffa7\012\uffa7\014\uffa7\016\uffa7\042\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\056\uffa7\057\uffa7\001\002\000" +
    "\066\004\uffc0\013\uffc0\020\uffc0\021\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\045\uffc0\046\uffc0\051\uffc0" +
    "\054\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\001\002\000\004\013\167\001\002\000\004\013\102" +
    "\001\002\000\040\013\046\035\054\036\100\037\063\040" +
    "\053\041\036\045\062\046\052\051\047\054\044\062\071" +
    "\063\045\064\104\065\050\066\041\001\002\000\030\011" +
    "\112\014\uffac\016\123\042\113\047\115\050\122\051\116" +
    "\052\121\053\111\056\120\057\117\001\002\000\042\004" +
    "\uff95\011\uff95\012\uff95\013\105\014\uff95\016\uff95\034\uff95" +
    "\042\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\056" +
    "\uff95\057\uff95\060\106\001\002\000\042\013\046\014\uff89" +
    "\035\054\036\100\037\063\040\053\041\036\045\062\046" +
    "\052\051\047\054\044\062\071\063\045\064\104\065\050" +
    "\066\041\001\002\000\034\004\uff91\011\uff91\012\uff91\014" +
    "\uff91\016\uff91\042\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\056\uff91\057\uff91\001\002\000\004\014\163\001" +
    "\002\000\030\011\112\014\uffac\016\123\042\113\047\115" +
    "\050\122\051\116\052\121\053\111\056\120\057\117\001" +
    "\002\000\040\013\046\035\054\036\100\037\063\040\053" +
    "\041\036\045\062\046\052\051\047\054\044\062\071\063" +
    "\045\064\104\065\050\066\041\001\002\000\040\013\046" +
    "\035\054\036\100\037\063\040\053\041\036\045\062\046" +
    "\052\051\047\054\044\062\071\063\045\064\104\065\050" +
    "\066\041\001\002\000\010\043\134\044\135\064\136\001" +
    "\002\000\004\014\uff8a\001\002\000\040\013\046\035\054" +
    "\036\100\037\063\040\053\041\036\045\062\046\052\051" +
    "\047\054\044\062\071\063\045\064\104\065\050\066\041" +
    "\001\002\000\040\013\046\035\054\036\100\037\063\040" +
    "\053\041\036\045\062\046\052\051\047\054\044\062\071" +
    "\063\045\064\104\065\050\066\041\001\002\000\040\013" +
    "\046\035\054\036\100\037\063\040\053\041\036\045\062" +
    "\046\052\051\047\054\044\062\071\063\045\064\104\065" +
    "\050\066\041\001\002\000\040\013\046\035\054\036\100" +
    "\037\063\040\053\041\036\045\062\046\052\051\047\054" +
    "\044\062\071\063\045\064\104\065\050\066\041\001\002" +
    "\000\040\013\046\035\054\036\100\037\063\040\053\041" +
    "\036\045\062\046\052\051\047\054\044\062\071\063\045" +
    "\064\104\065\050\066\041\001\002\000\040\013\046\035" +
    "\054\036\100\037\063\040\053\041\036\045\062\046\052" +
    "\051\047\054\044\062\071\063\045\064\104\065\050\066" +
    "\041\001\002\000\040\013\046\035\054\036\100\037\063" +
    "\040\053\041\036\045\062\046\052\051\047\054\044\062" +
    "\071\063\045\064\104\065\050\066\041\001\002\000\030" +
    "\011\112\014\uffac\016\123\042\113\047\115\050\122\051" +
    "\116\052\121\053\111\056\120\057\117\001\002\000\004" +
    "\014\uffad\001\002\000\030\004\uffa0\011\112\012\uffa0\014" +
    "\uffa0\016\uffa0\042\113\051\116\052\121\053\111\056\uffa0" +
    "\057\uffa0\001\002\000\034\004\uffa4\011\112\012\uffa4\014" +
    "\uffa4\016\uffa4\042\113\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\056\uffa4\057\uffa4\001\002\000\034\004\uffa2\011" +
    "\112\012\uffa2\014\uffa2\016\uffa2\042\113\047\115\050\122" +
    "\051\116\052\121\053\111\056\uffa2\057\uffa2\001\002\000" +
    "\034\004\uffa1\011\112\012\uffa1\014\uffa1\016\uffa1\042\113" +
    "\047\115\050\122\051\116\052\121\053\111\056\uffa1\057" +
    "\uffa1\001\002\000\034\004\uffa3\011\112\012\uffa3\014\uffa3" +
    "\016\uffa3\042\113\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\056\uffa3\057\uffa3\001\002\000\030\004\uff9f\011\112" +
    "\012\uff9f\014\uff9f\016\uff9f\042\113\051\116\052\121\053" +
    "\111\056\uff9f\057\uff9f\001\002\000\004\013\155\001\002" +
    "\000\004\013\150\001\002\000\042\004\uff94\011\uff94\012" +
    "\uff94\013\144\014\uff94\016\uff94\034\uff94\042\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\056\uff94\057\uff94\060" +
    "\145\001\002\000\006\013\140\060\141\001\002\000\042" +
    "\013\046\014\uff89\035\054\036\100\037\063\040\053\041" +
    "\036\045\062\046\052\051\047\054\044\062\071\063\045" +
    "\064\104\065\050\066\041\001\002\000\034\004\uff8d\011" +
    "\uff8d\012\uff8d\014\uff8d\016\uff8d\042\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\056\uff8d\057\uff8d\001\002\000" +
    "\004\014\143\001\002\000\034\004\uff8e\011\uff8e\012\uff8e" +
    "\014\uff8e\016\uff8e\042\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\056\uff8e\057\uff8e\001\002\000\042\013\046" +
    "\014\uff89\035\054\036\100\037\063\040\053\041\036\045" +
    "\062\046\052\051\047\054\044\062\071\063\045\064\104" +
    "\065\050\066\041\001\002\000\034\004\uff8f\011\uff8f\012" +
    "\uff8f\014\uff8f\016\uff8f\042\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\056\uff8f\057\uff8f\001\002\000\004\014" +
    "\147\001\002\000\034\004\uff90\011\uff90\012\uff90\014\uff90" +
    "\016\uff90\042\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053" +
    "\uff90\056\uff90\057\uff90\001\002\000\040\013\046\035\054" +
    "\036\100\037\063\040\053\041\036\045\062\046\052\051" +
    "\047\054\044\062\071\063\045\064\104\065\050\066\041" +
    "\001\002\000\026\011\112\016\152\042\113\047\115\050" +
    "\122\051\116\052\121\053\111\056\120\057\117\001\002" +
    "\000\040\013\046\035\054\036\100\037\063\040\053\041" +
    "\036\045\062\046\052\051\047\054\044\062\071\063\045" +
    "\064\104\065\050\066\041\001\002\000\026\011\112\014" +
    "\154\042\113\047\115\050\122\051\116\052\121\053\111" +
    "\056\120\057\117\001\002\000\006\013\uff8b\060\uff8b\001" +
    "\002\000\040\013\046\035\054\036\100\037\063\040\053" +
    "\041\036\045\062\046\052\051\047\054\044\062\071\063" +
    "\045\064\104\065\050\066\041\001\002\000\026\011\112" +
    "\014\157\042\113\047\115\050\122\051\116\052\121\053" +
    "\111\056\120\057\117\001\002\000\006\013\uff8c\060\uff8c" +
    "\001\002\000\026\011\112\012\161\042\113\047\115\050" +
    "\122\051\116\052\121\053\111\056\120\057\117\001\002" +
    "\000\036\004\uff93\011\uff93\012\uff93\014\uff93\016\uff93\034" +
    "\uff93\042\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\056\uff93\057\uff93\001\002\000\034\004\uffa5\011\112\012" +
    "\uffa5\014\uffa5\016\uffa5\042\113\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\056\uffa5\057\uffa5\001\002\000\034\004" +
    "\uff92\011\uff92\012\uff92\014\uff92\016\uff92\042\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\053\uff92\056\uff92\057\uff92\001" +
    "\002\000\004\014\165\001\002\000\004\004\166\001\002" +
    "\000\066\004\uffae\013\uffae\020\uffae\021\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\045\uffae\046\uffae\051" +
    "\uffae\054\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae" +
    "\066\uffae\001\002\000\004\064\170\001\002\000\004\014" +
    "\171\001\002\000\034\004\uff9c\011\uff9c\012\uff9c\014\uff9c" +
    "\016\uff9c\042\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\056\uff9c\057\uff9c\001\002\000\110\002\uffcb\003\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\013\uffcb\015" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\045\uffcb\046\uffcb\051\uffcb" +
    "\054\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\001\002\000\010\014\ufff0\055\ufff0\064\ufff0\001\002" +
    "\000\010\004\ufff6\014\ufff6\016\ufff6\001\002\000\004\021" +
    "\uffc7\001\002\000\042\004\uffbb\013\046\035\054\036\100" +
    "\037\063\040\053\041\036\045\062\046\052\051\047\054" +
    "\044\062\071\063\045\064\104\065\050\066\041\001\002" +
    "\000\030\004\uffbc\011\112\014\uffbc\042\113\047\115\050" +
    "\122\051\116\052\121\053\111\056\120\057\117\001\002" +
    "\000\004\004\201\001\002\000\040\013\046\035\054\036" +
    "\100\037\063\040\053\041\036\045\062\046\052\051\047" +
    "\054\044\062\071\063\045\064\104\065\050\066\041\001" +
    "\002\000\026\004\203\011\112\042\113\047\115\050\122" +
    "\051\116\052\121\053\111\056\120\057\117\001\002\000" +
    "\042\013\046\014\uffbb\035\054\036\100\037\063\040\053" +
    "\041\036\045\062\046\052\051\047\054\044\062\071\063" +
    "\045\064\104\065\050\066\041\001\002\000\004\014\205" +
    "\001\002\000\062\004\uffb2\013\uffb2\020\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\045\uffb2\046\uffb2\051\uffb2\054" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\001\002\000\062\004\056\013\046\020\031\025\064\027" +
    "\043\030\072\031\065\032\060\033\101\035\054\036\100" +
    "\037\063\040\053\041\036\045\062\046\052\051\047\054" +
    "\044\061\032\062\071\063\045\064\104\065\050\066\041" +
    "\001\002\000\066\004\uffb1\013\uffb1\020\uffb1\021\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\045\uffb1\046" +
    "\uffb1\051\uffb1\054\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\001\002\000\040\013\046\035\054\036" +
    "\100\037\063\040\053\041\036\045\062\046\052\051\047" +
    "\054\044\062\071\063\045\064\104\065\050\066\041\001" +
    "\002\000\034\004\uffab\011\112\012\uffab\014\uffab\016\uffab" +
    "\042\113\047\115\050\122\051\116\052\121\053\111\056" +
    "\120\057\117\001\002\000\066\004\uffc5\013\uffc5\020\uffc5" +
    "\021\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\045\uffc5\046\uffc5\051\uffc5\054\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\004\004\214" +
    "\001\002\000\066\004\uffb0\013\uffb0\020\uffb0\021\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\045\uffb0\046" +
    "\uffb0\051\uffb0\054\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\001\002\000\040\013\046\035\054\036" +
    "\100\037\063\040\053\041\036\045\062\046\052\051\047" +
    "\054\044\062\071\063\045\064\104\065\050\066\041\001" +
    "\002\000\026\011\112\014\217\042\113\047\115\050\122" +
    "\051\116\052\121\053\111\056\120\057\117\001\002\000" +
    "\062\004\uffba\013\uffba\020\uffba\025\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\045\uffba\046\uffba\051\uffba\054\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001\002\000" +
    "\062\004\056\013\046\020\031\025\064\027\043\030\072" +
    "\031\065\032\060\033\101\035\054\036\100\037\063\040" +
    "\053\041\036\045\062\046\052\051\047\054\044\061\032" +
    "\062\071\063\045\064\104\065\050\066\041\001\002\000" +
    "\066\004\uffb9\013\uffb9\020\uffb9\021\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\045\uffb9\046\uffb9\051\uffb9" +
    "\054\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\001\002\000\066\004\uffb5\013\uffb5\020\uffb5\021\uffb5" +
    "\025\uffb5\026\223\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\045\uffb5" +
    "\046\uffb5\051\uffb5\054\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\001\002\000\062\004\uffb7\013\uffb7" +
    "\020\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\045\uffb7" +
    "\046\uffb7\051\uffb7\054\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\001\002\000\066\004\uffb8\013\uffb8" +
    "\020\uffb8\021\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\045\uffb8\046\uffb8\051\uffb8\054\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\062" +
    "\004\056\013\046\020\031\025\064\027\043\030\072\031" +
    "\065\032\060\033\101\035\054\036\100\037\063\040\053" +
    "\041\036\045\062\046\052\051\047\054\044\061\032\062" +
    "\071\063\045\064\104\065\050\066\041\001\002\000\066" +
    "\004\uffb6\013\uffb6\020\uffb6\021\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\045\uffb6\046\uffb6\051\uffb6\054" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\001\002\000\040\013\046\035\054\036\100\037\063\040" +
    "\053\041\036\045\062\046\052\051\047\054\044\062\071" +
    "\063\045\064\104\065\050\066\041\001\002\000\026\011" +
    "\112\016\231\042\113\047\115\050\122\051\116\052\121" +
    "\053\111\056\120\057\117\001\002\000\014\005\005\006" +
    "\020\007\013\010\017\064\015\001\002\000\006\014\233" +
    "\055\173\001\002\000\034\004\uff9b\011\uff9b\012\uff9b\014" +
    "\uff9b\016\uff9b\042\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\056\uff9b\057\uff9b\001\002\000\066\004\uffaf\013" +
    "\uffaf\020\uffaf\021\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\045\uffaf\046\uffaf\051\uffaf\054\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000" +
    "\004\014\237\001\002\000\034\004\uff99\011\uff99\012\uff99" +
    "\014\uff99\016\uff99\042\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\056\uff99\057\uff99\001\002\000\034\004\uff9a" +
    "\011\uff9a\012\uff9a\014\uff9a\016\uff9a\042\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\056\uff9a\057\uff9a\001\002" +
    "\000\004\014\242\001\002\000\034\004\uff98\011\uff98\012" +
    "\uff98\014\uff98\016\uff98\042\uff98\047\uff98\050\uff98\051\uff98" +
    "\052\uff98\053\uff98\056\uff98\057\uff98\001\002\000\034\004" +
    "\uff97\011\uff97\012\uff97\014\uff97\016\uff97\042\uff97\047\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\056\uff97\057\uff97\001" +
    "\002\000\034\004\uff9e\011\112\012\uff9e\014\uff9e\016\uff9e" +
    "\042\113\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\056" +
    "\uff9e\057\uff9e\001\002\000\026\011\112\014\245\042\113" +
    "\047\115\050\122\051\116\052\121\053\111\056\120\057" +
    "\117\001\002\000\034\004\uffa6\011\uffa6\012\uffa6\014\uffa6" +
    "\016\uffa6\042\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\056\uffa6\057\uffa6\001\002\000\034\004\uff9d\011\112" +
    "\012\uff9d\014\uff9d\016\uff9d\042\113\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\056\uff9d\057\uff9d\001\002\000\040" +
    "\013\046\035\054\036\100\037\063\040\053\041\036\045" +
    "\062\046\052\051\047\054\044\062\071\063\045\064\104" +
    "\065\050\066\041\001\002\000\026\011\112\014\251\042" +
    "\113\047\115\050\122\051\116\052\121\053\111\056\120" +
    "\057\117\001\002\000\062\004\uffb4\013\uffb4\020\uffb4\025" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\045\uffb4\046\uffb4\051" +
    "\uffb4\054\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\001\002\000\062\004\056\013\046\020\031\025" +
    "\064\027\043\030\072\031\065\032\060\033\101\035\054" +
    "\036\100\037\063\040\053\041\036\045\062\046\052\051" +
    "\047\054\044\061\032\062\071\063\045\064\104\065\050" +
    "\066\041\001\002\000\066\004\uffb3\013\uffb3\020\uffb3\021" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\045" +
    "\uffb3\046\uffb3\051\uffb3\054\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\001\002\000\040\013\046\035" +
    "\054\036\100\037\063\040\053\041\036\045\062\046\052" +
    "\051\047\054\044\062\071\063\045\064\104\065\050\066" +
    "\041\001\002\000\026\011\112\014\256\042\113\047\115" +
    "\050\122\051\116\052\121\053\111\056\120\057\117\001" +
    "\002\000\034\004\uff96\011\uff96\012\uff96\014\uff96\016\uff96" +
    "\042\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\056" +
    "\uff96\057\uff96\001\002\000\016\005\005\006\020\007\013" +
    "\010\017\014\uffe4\064\015\001\002\000\004\014\266\001" +
    "\002\000\006\014\uffe2\016\262\001\002\000\014\005\005" +
    "\006\020\007\013\010\017\064\015\001\002\000\004\014" +
    "\uffe5\001\002\000\006\014\uffe2\016\262\001\002\000\004" +
    "\014\uffe3\001\002\000\006\020\uffeb\061\uffeb\001\002\000" +
    "\006\020\031\061\032\001\002\000\030\002\uffea\003\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\015\uffea\017\uffea\021" +
    "\uffea\024\uffea\064\uffea\001\002\000\026\002\ufff9\003\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\015\ufff9\017\ufff9\024" +
    "\ufff9\064\ufff9\001\002\000\026\002\ufff8\003\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\015\ufff8\017\ufff8\024\ufff8\064" +
    "\ufff8\001\002\000\006\020\274\061\275\001\002\000\020" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\015\uffd4\021\uffd4\064" +
    "\uffd4\001\002\000\026\002\uffd2\003\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\015\uffd2\017\uffd2\024\uffd2\064\uffd2\001" +
    "\002\000\020\005\uffd0\006\uffd0\007\uffd0\010\uffd0\015\uffd0" +
    "\021\uffd0\064\uffd0\001\002\000\020\005\005\006\020\007" +
    "\013\010\017\015\302\021\300\064\015\001\002\000\026" +
    "\002\uffd3\003\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\015" +
    "\uffd3\017\uffd3\024\uffd3\064\uffd3\001\002\000\006\055\173" +
    "\064\313\001\002\000\004\064\304\001\002\000\020\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\015\uffd1\021\uffd1\064\uffd1" +
    "\001\002\000\006\013\305\060\306\001\002\000\016\005" +
    "\005\006\020\007\013\010\017\014\uffe4\064\015\001\002" +
    "\000\004\004\307\001\002\000\020\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\015\uffcc\021\uffcc\064\uffcc\001\002\000\004" +
    "\014\311\001\002\000\004\004\312\001\002\000\020\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\015\uffce\021\uffce\064\uffce" +
    "\001\002\000\006\013\314\060\315\001\002\000\016\005" +
    "\005\006\020\007\013\010\017\014\uffe4\064\015\001\002" +
    "\000\004\004\316\001\002\000\020\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\015\uffcd\021\uffcd\064\uffcd\001\002\000\004" +
    "\014\320\001\002\000\004\004\321\001\002\000\020\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\015\uffcf\021\uffcf\064\uffcf" +
    "\001\002\000\012\020\uffdd\022\324\023\uffdd\061\uffdd\001" +
    "\002\000\010\020\uffdb\023\327\061\uffdb\001\002\000\004" +
    "\064\325\001\002\000\010\020\uffde\023\uffde\061\uffde\001" +
    "\002\000\006\020\uffe1\061\335\001\002\000\004\064\330" +
    "\001\002\000\010\016\uffda\020\uffda\061\uffda\001\002\000" +
    "\010\016\332\020\uffdc\061\uffdc\001\002\000\004\064\333" +
    "\001\002\000\010\016\uffd9\020\uffd9\061\uffd9\001\002\000" +
    "\004\020\336\001\002\000\026\002\uffdf\003\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\015\uffdf\017\uffdf\024\uffdf\064" +
    "\uffdf\001\002\000\020\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\015\uffd7\021\uffd7\064\uffd7\001\002\000\020\005\005\006" +
    "\020\007\013\010\017\015\023\021\340\064\015\001\002" +
    "\000\026\002\uffe0\003\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\015\uffe0\017\uffe0\024\uffe0\064\uffe0\001\002\000\020" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\015\uffd6\021\uffd6\064" +
    "\uffd6\001\002\000\020\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\015\uffd8\021\uffd8\064\uffd8\001\002\000\020\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\015\uffd5\021\uffd5\064\uffd5\001\002" +
    "\000\004\002\001\001\002\000\106\002\ufff7\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\013\ufff7\015\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\024\ufff7\025\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\045\ufff7\046\ufff7\051\ufff7\054\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\001\002" +
    "\000\026\002\000\003\022\005\005\006\020\007\013\010" +
    "\017\015\023\017\014\024\021\064\015\001\002\000\026" +
    "\002\uffff\003\uffff\005\uffff\006\uffff\007\uffff\010\uffff\015" +
    "\uffff\017\uffff\024\uffff\064\uffff\001\002\000\010\004\ufff6" +
    "\013\351\060\352\001\002\000\016\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\014\uffef\064\uffef\001\002\000\006\020\uffe9" +
    "\061\uffe9\001\002\000\006\020\031\061\032\001\002\000" +
    "\030\002\uffe8\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\015\uffe8\017\uffe8\021\uffe8\024\uffe8\064\uffe8\001\002\000" +
    "\016\005\005\006\020\007\013\010\017\014\uffe4\064\015" +
    "\001\002\000\004\014\357\001\002\000\006\020\uffee\061" +
    "\uffee\001\002\000\006\020\031\061\032\001\002\000\030" +
    "\002\uffed\003\uffed\005\uffed\006\uffed\007\uffed\010\uffed\015" +
    "\uffed\017\uffed\021\uffed\024\uffed\064\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\022\002\011\004\007\005\006\007\010\010" +
    "\003\011\023\014\015\022\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\256\001\001\000\004" +
    "\054\027\001\001\000\004\025\032\001\001\000\004\006" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\067\007\010\010\073\025\056\026\072\027\074\030" +
    "\060\032\050\033\037\034\034\035\076\036\041\037\065" +
    "\042\066\043\075\046\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\037" +
    "\245\042\066\043\075\046\036\001\001\000\002\001\001" +
    "\000\012\037\243\042\066\043\075\046\036\001\001\000" +
    "\012\037\242\042\066\043\075\046\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\037\176\040\212\042\066\043\075\046\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\025\056\026\072\027" +
    "\174\030\060\032\050\033\037\034\034\035\076\036\041" +
    "\037\065\042\066\043\075\046\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\102\042" +
    "\066\043\075\046\036\001\001\000\004\041\163\001\001" +
    "\000\002\001\001\000\014\037\107\042\066\043\075\045" +
    "\106\046\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\113\001\001\000\012\037\161\042\066\043" +
    "\075\046\036\001\001\000\012\037\157\042\066\043\075" +
    "\046\036\001\001\000\004\044\136\001\001\000\002\001" +
    "\001\000\012\037\132\042\066\043\075\046\036\001\001" +
    "\000\012\037\131\042\066\043\075\046\036\001\001\000" +
    "\012\037\130\042\066\043\075\046\036\001\001\000\012" +
    "\037\127\042\066\043\075\046\036\001\001\000\012\037" +
    "\126\042\066\043\075\046\036\001\001\000\012\037\125" +
    "\042\066\043\075\046\036\001\001\000\012\037\123\042" +
    "\066\043\075\046\036\001\001\000\004\041\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\037\107\042\066\043\075" +
    "\045\141\046\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\037\107\042\066\043\075" +
    "\045\145\046\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\150\042\066\043\075" +
    "\046\036\001\001\000\002\001\001\000\012\037\152\042" +
    "\066\043\075\046\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\037\155\042\066\043\075\046\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\037\176\040\177\042\066\043\075\046\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\037\201" +
    "\042\066\043\075\046\036\001\001\000\002\001\001\000" +
    "\014\037\176\040\203\042\066\043\075\046\036\001\001" +
    "\000\002\001\001\000\004\063\205\001\001\000\032\025" +
    "\056\026\206\030\060\032\050\033\037\034\034\035\076" +
    "\036\041\037\065\042\066\043\075\046\036\001\001\000" +
    "\002\001\001\000\012\037\210\042\066\043\075\046\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\215\042\066\043\075" +
    "\046\036\001\001\000\002\001\001\000\004\057\217\001" +
    "\001\000\032\025\056\026\220\030\060\032\050\033\037" +
    "\034\034\035\076\036\041\037\065\042\066\043\075\046" +
    "\036\001\001\000\004\060\221\001\001\000\004\031\223" +
    "\001\001\000\004\061\224\001\001\000\002\001\001\000" +
    "\032\025\056\026\225\030\060\032\050\033\037\034\034" +
    "\035\076\036\041\037\065\042\066\043\075\046\036\001" +
    "\001\000\002\001\001\000\012\037\227\042\066\043\075" +
    "\046\036\001\001\000\002\001\001\000\004\010\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\037\247\042\066\043\075\046\036\001\001" +
    "\000\002\001\001\000\004\062\251\001\001\000\032\025" +
    "\056\026\252\030\060\032\050\033\037\034\034\035\076" +
    "\036\041\037\065\042\066\043\075\046\036\001\001\000" +
    "\002\001\001\000\012\037\254\042\066\043\075\046\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\260\010\073\012\257\001\001\000\002\001\001\000\004" +
    "\013\262\001\001\000\006\007\263\010\073\001\001\000" +
    "\002\001\001\000\004\013\264\001\001\000\002\001\001" +
    "\000\004\052\266\001\001\000\004\025\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\275\001\001\000\002\001\001\000" +
    "\004\024\276\001\001\000\006\010\300\023\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\260\010\073" +
    "\012\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\260\010\073\012\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\322\001\001\000" +
    "\004\016\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\333\001\001\000\004\017\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\336\001\001\000\014\005\340\007\010\010\003\011\342" +
    "\020\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\346\005\006\007\010\010\003\011" +
    "\023\014\015\022\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\354\001\001\000\004\053\352\001" +
    "\001\000\004\025\353\001\001\000\002\001\001\000\010" +
    "\007\260\010\073\012\355\001\001\000\002\001\001\000" +
    "\004\050\357\001\001\000\004\025\360\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Hashtable<String, symbol> symbolTable = new Hashtable<String, symbol>();
    public static List<logs> Log = new  ArrayList<logs>();
    
    public ArrayList<String> SyntacticErrors = new ArrayList<String>();
    public int count = 0;

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m1*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public Hashtable<String, symbol> getHashTable(){
         return symbolTable;
     }
     
     public List<logs> getLog (){
         return Log;
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


                Diccionario exec = new Diccionario();

                public int context = 0, cMin = 0, ambito = 0;
                public String parametros = "", clase = "null";
            
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Constant ::= sNull 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Constant ::= stringConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Constant ::= boolConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Constant ::= doubleConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Constant ::= integerConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Actuals ::= Expr ExprRepeat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LibCall ::= sSetByte OpeningParenthesis Expr comma Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LibCall ::= sGetByte OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Call ::= Expr dot LibCall Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Call ::= Expr dot LibCall OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Call ::= Expr dot ident Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Call ::= Expr dot ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Call ::= ident Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Call ::= ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LValue ::= Expr OpeningBracket Expr ClosedBracket 
            {
              Object RESULT =null;
		int simbolo1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int simbolo1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object simbolo1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int simbolo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int simbolo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object simbolo2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LValue ::= Expr dot ident 
            {
              Object RESULT =null;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object simbolo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LValue ::= ident 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= sMalloc OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= sReadLine OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= sReadLine Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= sReadInteger Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= sReadInteger OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= sNewArray OpeningParenthesis Expr comma Type ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= sNew OpeningParenthesis ident ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= denial Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr ComparisonOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr equality Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr or Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr and Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr sum Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr ArithmeticOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= sThis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= LValue assignment Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExprRepeat ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprRepeat ::= comma Expr ExprRepeat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrintStmt ::= sPrint OpeningParenthesis Expr ExprRepeat ClosedParenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BreakStmt ::= sBreak pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ReturnStmt ::= sReturn ExprOZ pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForStmt ::= lFor OpeningParenthesis ExprOZ pyc Expr pyc ExprOZ ClosedParenthesis NT$12 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WhileStmt ::= lWhile OpeningParenthesis Expr ClosedParenthesis NT$11 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ElseStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ElseStmt ::= cElse NT$10 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$10 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IfStmt ::= cIf OpeningParenthesis Expr ClosedParenthesis NT$8 Stmt NT$9 ElseStmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$8 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprOZ ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExprOZ ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= Expr pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StmtAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StmtAux ::= Stmt StmtAux 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VariableDeclAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VariableDeclAux ::= VariableDeclAux VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtBlock ::= CurlyBrackets 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StmtBlock ::= OpeningCurlyBracket VariableDeclAux StmtAux ClosedCurlyBracket 
            {
              Object RESULT =null;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Prototype ::= sVoid ident Parenthesis pyc 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    symbol s = new symbol(nombre.toString(), "method", ambito, clase);
                    s.AddFunction("method", parametros);
                    Sintactico.symbolTable.put(nombre.toString(), s);
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                    parametros = "";
                }

             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Prototype ::= Type ident Parenthesis pyc 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Prototype ::= sVoid ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", ambito , clase);
                        s.AddFunction("void", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Prototype ::= Type ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RepeatablePrototype ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RepeatablePrototype ::= RepeatablePrototype Prototype 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InterfaceDecl ::= sInterface ident CurlyBrackets 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: INTERFACE "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        Sintactico.symbolTable.put(nombre.toString(), new symbol(nombre.toString(), "interface", ambito, nombre.toString()));
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "interface", "", ambito, nombre.toString()));
                    }
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InterfaceDecl ::= sInterface ident OpeningCurlyBracket NT$7 RepeatablePrototype ClosedCurlyBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; clase = "null";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$7 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: INTERFACE "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        clase = nombre.toString();
                        Sintactico.symbolTable.put(clase, new symbol(clase, "interface", ambito, clase));
                        Sintactico.Log.add(new logs("INSERT", clase, "interface", "", ambito, clase));
                        ambito++; Sintactico.Log.add(new logs("Ámbito++"));
                    }
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RepeatableField ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RepeatableField ::= RepeatableField Field 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MultipleIdents ::= MultipleIdents comma ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MultipleIdents ::= ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ImpIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ImpIdent ::= sImplements MultipleIdents 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExtIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExtIdent ::= sExtends ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl ::= sClass ident ExtIdent ImpIdent CurlyBrackets 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                    Sintactico.symbolTable.put(nombre.toString(), new symbol(nombre.toString(), "class", ambito, nombre.toString()));
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "class", "", ambito, nombre.toString()));
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl ::= sClass ident ExtIdent ImpIdent NT$6 OpeningCurlyBracket RepeatableField ClosedCurlyBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito)); ambito--; clase = "null"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: CLASS "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        clase = nombre.toString();
                        Sintactico.symbolTable.put(clase, new symbol(clase, "class", ambito, clase));
                        Sintactico.Log.add(new logs("INSERT", clase, "class", "", ambito, clase));
                        ambito++; Sintactico.Log.add(new logs("Ámbito++"));
                    }
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RepeatVariable ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RepeatVariable ::= comma Variable RepeatVariable 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            parametros += tipo.toString()+"$";
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Formals ::= Variable RepeatVariable 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            parametros += tipo.toString()+"$"; 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionDecl ::= sVoid ident Parenthesis NT$5 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", ambito, clase);
                        s.AddFunction("method", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunctionDecl ::= Type ident Parenthesis NT$4 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionDecl ::= sVoid ident OpeningParenthesis NT$2 Formals ClosedParenthesis NT$3 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", (ambito - 1), clase);
                        s.AddFunction("void", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, (ambito - 1), clase));
                        Sintactico.Log.add(new logs("Ámbito++"));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= Type ident OpeningParenthesis NT$0 Formals ClosedParenthesis NT$1 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", (ambito - 1), clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, (ambito - 1), clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type Brackets 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = tipo+"[]"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
             if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                RESULT = nombre.toString(); 
             }
             else{
                System.out.println("\033[31m***ERROR: IDENTIFIER "+ nombre.toString() +" DOES NOT EXIST***");
                //throw new Error("Impossible to continue.");
                //RESULT = "";
             }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    Sintactico.symbolTable.put(nombre.toString(), new symbol (nombre.toString(), tipo.toString(), ambito, clase));
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), tipo.toString(), "", ambito, clase));
                } 
                RESULT = tipo.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramA ::= ProgramA Decl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl ProgramA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

