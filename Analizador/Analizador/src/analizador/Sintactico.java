
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 18 16:18:37 CST 2018
//----------------------------------------------------

package analizador;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 18 16:18:37 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\005\004\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\004\000\002\047\002" +
    "\000\002\011\011\000\002\011\010\000\002\011\006\000" +
    "\002\011\006\000\002\012\004\000\002\012\002\000\002" +
    "\013\005\000\002\013\002\000\002\014\011\000\002\014" +
    "\007\000\002\015\004\000\002\015\002\000\002\016\004" +
    "\000\002\016\002\000\002\017\003\000\002\017\005\000" +
    "\002\021\004\000\002\021\002\000\002\020\003\000\002" +
    "\020\003\000\002\022\007\000\002\022\005\000\002\024" +
    "\004\000\002\024\002\000\002\023\010\000\002\023\010" +
    "\000\002\023\006\000\002\023\006\000\002\025\006\000" +
    "\002\025\003\000\002\006\004\000\002\006\002\000\002" +
    "\027\004\000\002\027\002\000\002\026\004\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\040\003\000\002\040\002\000\002" +
    "\030\010\000\002\031\004\000\002\031\002\000\002\032" +
    "\007\000\002\033\013\000\002\034\005\000\002\035\004" +
    "\000\002\036\010\000\002\041\005\000\002\041\002\000" +
    "\002\037\005\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\004\000\002\037\004\000\002\037\006\000\002" +
    "\037\010\000\002\037\005\000\002\037\004\000\002\037" +
    "\004\000\002\037\005\000\002\037\006\000\002\042\003" +
    "\000\002\042\005\000\002\042\006\000\002\043\006\000" +
    "\002\043\004\000\002\043\010\000\002\043\006\000\002" +
    "\043\010\000\002\043\006\000\002\044\006\000\002\044" +
    "\010\000\002\045\004\000\002\045\002\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\024\003\022\005\005\006\020\007\013\010" +
    "\017\015\023\017\014\024\021\064\015\001\002\000\006" +
    "\055\172\064\336\001\002\000\010\014\ufff5\055\ufff5\064" +
    "\ufff5\001\002\000\026\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\015\ufffa\017\ufffa\024\ufffa\064\ufffa\001" +
    "\002\000\026\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\015\ufffd\017\ufffd\024\ufffd\064\ufffd\001\002\000" +
    "\026\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\015\ufffe\017\ufffe\024\ufffe\064\ufffe\001\002\000\004\004" +
    "\333\001\002\000\004\002\332\001\002\000\010\014\ufff3" +
    "\055\ufff3\064\ufff3\001\002\000\004\064\311\001\002\000" +
    "\010\014\ufff1\055\ufff1\064\ufff1\001\002\000\026\002\ufffb" +
    "\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\015\ufffb\017" +
    "\ufffb\024\ufffb\064\ufffb\001\002\000\010\014\ufff2\055\ufff2" +
    "\064\ufff2\001\002\000\010\014\ufff4\055\ufff4\064\ufff4\001" +
    "\002\000\004\064\263\001\002\000\006\004\261\021\262" +
    "\001\002\000\004\064\025\001\002\000\026\002\ufffc\003" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\015\ufffc\017\ufffc" +
    "\024\ufffc\064\ufffc\001\002\000\006\013\026\060\027\001" +
    "\002\000\016\005\005\006\020\007\013\010\017\014\uffe9" +
    "\064\015\001\002\000\006\020\030\061\031\001\002\000" +
    "\074\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\013\uffcf" +
    "\020\uffcf\021\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\045\uffcf\046\uffcf\051\uffcf\054\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000\110\002\uffd1" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\013" +
    "\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\045\uffd1\046\uffd1" +
    "\051\uffd1\054\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\001\002\000\030\002\uffeb\003\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\015\uffeb\017\uffeb\021\uffeb\024" +
    "\uffeb\064\uffeb\001\002\000\074\004\054\005\005\006\020" +
    "\007\013\010\017\013\045\020\030\021\uffcd\025\063\027" +
    "\041\030\071\031\064\032\057\033\100\035\053\036\077" +
    "\037\062\040\052\041\035\045\060\046\050\051\046\054" +
    "\043\061\031\062\070\063\044\064\055\065\047\066\040" +
    "\001\002\000\066\004\uffc6\013\uffc6\020\uffc6\021\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\045\uffc6\046" +
    "\uffc6\051\uffc6\054\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\001\002\000\004\013\246\001\002\000" +
    "\034\004\uffb6\011\uffb6\012\uffb6\014\uffb6\016\uffb6\042\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\056\uffb6\057" +
    "\uffb6\001\002\000\066\004\uffc8\013\uffc8\020\uffc8\021\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\045\uffc8" +
    "\046\uffc8\051\uffc8\054\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\001\002\000\034\004\uff93\011\uff93" +
    "\012\uff93\014\uff93\016\uff93\042\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\056\uff93\057\uff93\001\002\000\004" +
    "\013\242\001\002\000\066\004\uffc5\013\uffc5\020\uffc5\021" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\045" +
    "\uffc5\046\uffc5\051\uffc5\054\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\001\002\000\040\013\045\035" +
    "\053\036\077\037\062\040\052\041\035\045\060\046\050" +
    "\051\046\054\043\062\070\063\044\064\103\065\047\066" +
    "\040\001\002\000\034\004\uff91\011\uff91\012\uff91\014\uff91" +
    "\016\uff91\042\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053" +
    "\uff91\056\uff91\057\uff91\001\002\000\040\013\045\035\053" +
    "\036\077\037\062\040\052\041\035\045\060\046\050\051" +
    "\046\054\043\062\070\063\044\064\103\065\047\066\040" +
    "\001\002\000\040\013\045\035\053\036\077\037\062\040" +
    "\052\041\035\045\060\046\050\051\046\054\043\062\070" +
    "\063\044\064\103\065\047\066\040\001\002\000\034\004" +
    "\uff92\011\uff92\012\uff92\014\uff92\016\uff92\042\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\053\uff92\056\uff92\057\uff92\001" +
    "\002\000\006\013\233\060\234\001\002\000\066\004\uffc9" +
    "\013\uffc9\020\uffc9\021\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\045\uffc9\046\uffc9\051\uffc9\054\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002" +
    "\000\006\013\230\060\231\001\002\000\034\004\uffb4\011" +
    "\uffb4\012\uffb4\014\uffb4\016\uffb4\042\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\056\uffb4\057\uffb4\001\002\000" +
    "\066\004\uffcb\013\uffcb\020\uffcb\021\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\045\uffcb\046\uffcb\051\uffcb" +
    "\054\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\001\002\000\040\004\uffa1\011\uffa1\013\104\034\uffa1" +
    "\042\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\055" +
    "\ufff1\056\uffa1\057\uffa1\060\105\064\ufff1\001\002\000\066" +
    "\004\uffc4\013\uffc4\020\uffc4\021\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\045\uffc4\046\uffc4\051\uffc4\054" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\001\002\000\004\004\227\001\002\000\034\004\uff90\011" +
    "\uff90\012\uff90\014\uff90\016\uff90\042\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\056\uff90\057\uff90\001\002\000" +
    "\066\004\uffca\013\uffca\020\uffca\021\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\045\uffca\046\uffca\051\uffca" +
    "\054\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066" +
    "\uffca\001\002\000\004\013\222\001\002\000\004\013\213" +
    "\001\002\000\042\004\uffc2\013\045\035\053\036\077\037" +
    "\062\040\052\041\035\045\060\046\050\051\046\054\043" +
    "\062\070\063\044\064\103\065\047\066\040\001\002\000" +
    "\026\004\210\011\110\042\112\047\114\050\121\051\115" +
    "\052\120\053\111\056\117\057\116\001\002\000\036\004" +
    "\uffb5\011\uffb5\012\uffb5\014\uffb5\016\uffb5\034\206\042\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\056\uffb5\057" +
    "\uffb5\001\002\000\074\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\013\uffd0\020\uffd0\021\uffd0\025\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\045\uffd0\046\uffd0\051\uffd0\054\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002" +
    "\000\034\004\uff94\011\uff94\012\uff94\014\uff94\016\uff94\042" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\056\uff94" +
    "\057\uff94\001\002\000\004\013\175\001\002\000\064\004" +
    "\054\013\045\020\030\021\uffcd\025\063\027\041\030\071" +
    "\031\064\032\057\033\100\035\053\036\077\037\062\040" +
    "\052\041\035\045\060\046\050\051\046\054\043\061\031" +
    "\062\070\063\044\064\103\065\047\066\040\001\002\000" +
    "\006\055\172\064\173\001\002\000\004\021\171\001\002" +
    "\000\034\004\uffb3\011\uffb3\012\uffb3\014\uffb3\016\uffb3\042" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\056\uffb3" +
    "\057\uffb3\001\002\000\066\004\uffc7\013\uffc7\020\uffc7\021" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\045" +
    "\uffc7\046\uffc7\051\uffc7\054\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\001\002\000\004\013\166\001" +
    "\002\000\004\013\101\001\002\000\040\013\045\035\053" +
    "\036\077\037\062\040\052\041\035\045\060\046\050\051" +
    "\046\054\043\062\070\063\044\064\103\065\047\066\040" +
    "\001\002\000\030\011\110\014\uffb8\016\122\042\112\047" +
    "\114\050\121\051\115\052\120\053\111\056\117\057\116" +
    "\001\002\000\042\004\uffa1\011\uffa1\012\uffa1\013\104\014" +
    "\uffa1\016\uffa1\034\uffa1\042\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\056\uffa1\057\uffa1\060\105\001\002\000" +
    "\042\013\045\014\uff95\035\053\036\077\037\062\040\052" +
    "\041\035\045\060\046\050\051\046\054\043\062\070\063" +
    "\044\064\103\065\047\066\040\001\002\000\034\004\uff9d" +
    "\011\uff9d\012\uff9d\014\uff9d\016\uff9d\042\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\056\uff9d\057\uff9d\001\002" +
    "\000\004\014\162\001\002\000\030\011\110\014\uffb8\016" +
    "\122\042\112\047\114\050\121\051\115\052\120\053\111" +
    "\056\117\057\116\001\002\000\040\013\045\035\053\036" +
    "\077\037\062\040\052\041\035\045\060\046\050\051\046" +
    "\054\043\062\070\063\044\064\103\065\047\066\040\001" +
    "\002\000\040\013\045\035\053\036\077\037\062\040\052" +
    "\041\035\045\060\046\050\051\046\054\043\062\070\063" +
    "\044\064\103\065\047\066\040\001\002\000\010\043\133" +
    "\044\134\064\135\001\002\000\004\014\uff96\001\002\000" +
    "\040\013\045\035\053\036\077\037\062\040\052\041\035" +
    "\045\060\046\050\051\046\054\043\062\070\063\044\064" +
    "\103\065\047\066\040\001\002\000\040\013\045\035\053" +
    "\036\077\037\062\040\052\041\035\045\060\046\050\051" +
    "\046\054\043\062\070\063\044\064\103\065\047\066\040" +
    "\001\002\000\040\013\045\035\053\036\077\037\062\040" +
    "\052\041\035\045\060\046\050\051\046\054\043\062\070" +
    "\063\044\064\103\065\047\066\040\001\002\000\040\013" +
    "\045\035\053\036\077\037\062\040\052\041\035\045\060" +
    "\046\050\051\046\054\043\062\070\063\044\064\103\065" +
    "\047\066\040\001\002\000\040\013\045\035\053\036\077" +
    "\037\062\040\052\041\035\045\060\046\050\051\046\054" +
    "\043\062\070\063\044\064\103\065\047\066\040\001\002" +
    "\000\040\013\045\035\053\036\077\037\062\040\052\041" +
    "\035\045\060\046\050\051\046\054\043\062\070\063\044" +
    "\064\103\065\047\066\040\001\002\000\040\013\045\035" +
    "\053\036\077\037\062\040\052\041\035\045\060\046\050" +
    "\051\046\054\043\062\070\063\044\064\103\065\047\066" +
    "\040\001\002\000\030\011\110\014\uffb8\016\122\042\112" +
    "\047\114\050\121\051\115\052\120\053\111\056\117\057" +
    "\116\001\002\000\004\014\uffb9\001\002\000\030\004\uffac" +
    "\011\110\012\uffac\014\uffac\016\uffac\042\112\051\115\052" +
    "\120\053\111\056\uffac\057\uffac\001\002\000\034\004\uffb0" +
    "\011\110\012\uffb0\014\uffb0\016\uffb0\042\112\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\056\uffb0\057\uffb0\001\002" +
    "\000\034\004\uffae\011\110\012\uffae\014\uffae\016\uffae\042" +
    "\112\047\114\050\121\051\115\052\120\053\111\056\uffae" +
    "\057\uffae\001\002\000\034\004\uffad\011\110\012\uffad\014" +
    "\uffad\016\uffad\042\112\047\114\050\121\051\115\052\120" +
    "\053\111\056\uffad\057\uffad\001\002\000\034\004\uffaf\011" +
    "\110\012\uffaf\014\uffaf\016\uffaf\042\112\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\056\uffaf\057\uffaf\001\002\000" +
    "\030\004\uffab\011\110\012\uffab\014\uffab\016\uffab\042\112" +
    "\051\115\052\120\053\111\056\uffab\057\uffab\001\002\000" +
    "\004\013\154\001\002\000\004\013\147\001\002\000\042" +
    "\004\uffa0\011\uffa0\012\uffa0\013\143\014\uffa0\016\uffa0\034" +
    "\uffa0\042\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\056\uffa0\057\uffa0\060\144\001\002\000\006\013\137\060" +
    "\140\001\002\000\042\013\045\014\uff95\035\053\036\077" +
    "\037\062\040\052\041\035\045\060\046\050\051\046\054" +
    "\043\062\070\063\044\064\103\065\047\066\040\001\002" +
    "\000\034\004\uff99\011\uff99\012\uff99\014\uff99\016\uff99\042" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\056\uff99" +
    "\057\uff99\001\002\000\004\014\142\001\002\000\034\004" +
    "\uff9a\011\uff9a\012\uff9a\014\uff9a\016\uff9a\042\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\056\uff9a\057\uff9a\001" +
    "\002\000\042\013\045\014\uff95\035\053\036\077\037\062" +
    "\040\052\041\035\045\060\046\050\051\046\054\043\062" +
    "\070\063\044\064\103\065\047\066\040\001\002\000\034" +
    "\004\uff9b\011\uff9b\012\uff9b\014\uff9b\016\uff9b\042\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\056\uff9b\057\uff9b" +
    "\001\002\000\004\014\146\001\002\000\034\004\uff9c\011" +
    "\uff9c\012\uff9c\014\uff9c\016\uff9c\042\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\056\uff9c\057\uff9c\001\002\000" +
    "\040\013\045\035\053\036\077\037\062\040\052\041\035" +
    "\045\060\046\050\051\046\054\043\062\070\063\044\064" +
    "\103\065\047\066\040\001\002\000\026\011\110\016\151" +
    "\042\112\047\114\050\121\051\115\052\120\053\111\056" +
    "\117\057\116\001\002\000\040\013\045\035\053\036\077" +
    "\037\062\040\052\041\035\045\060\046\050\051\046\054" +
    "\043\062\070\063\044\064\103\065\047\066\040\001\002" +
    "\000\026\011\110\014\153\042\112\047\114\050\121\051" +
    "\115\052\120\053\111\056\117\057\116\001\002\000\006" +
    "\013\uff97\060\uff97\001\002\000\040\013\045\035\053\036" +
    "\077\037\062\040\052\041\035\045\060\046\050\051\046" +
    "\054\043\062\070\063\044\064\103\065\047\066\040\001" +
    "\002\000\026\011\110\014\156\042\112\047\114\050\121" +
    "\051\115\052\120\053\111\056\117\057\116\001\002\000" +
    "\006\013\uff98\060\uff98\001\002\000\034\004\uffb1\011\110" +
    "\012\uffb1\014\uffb1\016\uffb1\042\112\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\056\uffb1\057\uffb1\001\002\000\026" +
    "\011\110\012\161\042\112\047\114\050\121\051\115\052" +
    "\120\053\111\056\117\057\116\001\002\000\036\004\uff9f" +
    "\011\uff9f\012\uff9f\014\uff9f\016\uff9f\034\uff9f\042\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\056\uff9f\057\uff9f" +
    "\001\002\000\034\004\uff9e\011\uff9e\012\uff9e\014\uff9e\016" +
    "\uff9e\042\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\056\uff9e\057\uff9e\001\002\000\004\014\164\001\002\000" +
    "\004\004\165\001\002\000\066\004\uffba\013\uffba\020\uffba" +
    "\021\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\045\uffba\046\uffba\051\uffba\054\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\001\002\000\004\064\167" +
    "\001\002\000\004\014\170\001\002\000\034\004\uffa8\011" +
    "\uffa8\012\uffa8\014\uffa8\016\uffa8\042\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\056\uffa8\057\uffa8\001\002\000" +
    "\110\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\013\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\045" +
    "\uffd2\046\uffd2\051\uffd2\054\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\001\002\000\010\014\ufff0\055" +
    "\ufff0\064\ufff0\001\002\000\010\004\ufff6\014\ufff6\016\ufff6" +
    "\001\002\000\004\021\uffce\001\002\000\042\004\uffc2\013" +
    "\045\035\053\036\077\037\062\040\052\041\035\045\060" +
    "\046\050\051\046\054\043\062\070\063\044\064\103\065" +
    "\047\066\040\001\002\000\030\004\uffc3\011\110\014\uffc3" +
    "\042\112\047\114\050\121\051\115\052\120\053\111\056" +
    "\117\057\116\001\002\000\004\004\200\001\002\000\040" +
    "\013\045\035\053\036\077\037\062\040\052\041\035\045" +
    "\060\046\050\051\046\054\043\062\070\063\044\064\103" +
    "\065\047\066\040\001\002\000\026\004\202\011\110\042" +
    "\112\047\114\050\121\051\115\052\120\053\111\056\117" +
    "\057\116\001\002\000\042\013\045\014\uffc2\035\053\036" +
    "\077\037\062\040\052\041\035\045\060\046\050\051\046" +
    "\054\043\062\070\063\044\064\103\065\047\066\040\001" +
    "\002\000\004\014\204\001\002\000\062\004\054\013\045" +
    "\020\030\025\063\027\041\030\071\031\064\032\057\033" +
    "\100\035\053\036\077\037\062\040\052\041\035\045\060" +
    "\046\050\051\046\054\043\061\031\062\070\063\044\064" +
    "\103\065\047\066\040\001\002\000\066\004\uffbd\013\uffbd" +
    "\020\uffbd\021\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\045\uffbd\046\uffbd\051\uffbd\054\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\040" +
    "\013\045\035\053\036\077\037\062\040\052\041\035\045" +
    "\060\046\050\051\046\054\043\062\070\063\044\064\103" +
    "\065\047\066\040\001\002\000\034\004\uffb7\011\110\012" +
    "\uffb7\014\uffb7\016\uffb7\042\112\047\114\050\121\051\115" +
    "\052\120\053\111\056\117\057\116\001\002\000\066\004" +
    "\uffcc\013\uffcc\020\uffcc\021\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\045\uffcc\046\uffcc\051\uffcc\054\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\001" +
    "\002\000\004\004\212\001\002\000\066\004\uffbc\013\uffbc" +
    "\020\uffbc\021\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\045\uffbc\046\uffbc\051\uffbc\054\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000\040" +
    "\013\045\035\053\036\077\037\062\040\052\041\035\045" +
    "\060\046\050\051\046\054\043\062\070\063\044\064\103" +
    "\065\047\066\040\001\002\000\026\011\110\014\215\042" +
    "\112\047\114\050\121\051\115\052\120\053\111\056\117" +
    "\057\116\001\002\000\062\004\054\013\045\020\030\025" +
    "\063\027\041\030\071\031\064\032\057\033\100\035\053" +
    "\036\077\037\062\040\052\041\035\045\060\046\050\051" +
    "\046\054\043\061\031\062\070\063\044\064\103\065\047" +
    "\066\040\001\002\000\066\004\uffbf\013\uffbf\020\uffbf\021" +
    "\uffbf\025\uffbf\026\217\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\045" +
    "\uffbf\046\uffbf\051\uffbf\054\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\001\002\000\062\004\054\013" +
    "\045\020\030\025\063\027\041\030\071\031\064\032\057" +
    "\033\100\035\053\036\077\037\062\040\052\041\035\045" +
    "\060\046\050\051\046\054\043\061\031\062\070\063\044" +
    "\064\103\065\047\066\040\001\002\000\066\004\uffc1\013" +
    "\uffc1\020\uffc1\021\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\045\uffc1\046\uffc1\051\uffc1\054\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000" +
    "\066\004\uffc0\013\uffc0\020\uffc0\021\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\045\uffc0\046\uffc0\051\uffc0" +
    "\054\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\001\002\000\040\013\045\035\053\036\077\037\062" +
    "\040\052\041\035\045\060\046\050\051\046\054\043\062" +
    "\070\063\044\064\103\065\047\066\040\001\002\000\026" +
    "\011\110\016\224\042\112\047\114\050\121\051\115\052" +
    "\120\053\111\056\117\057\116\001\002\000\014\005\005" +
    "\006\020\007\013\010\017\064\015\001\002\000\006\014" +
    "\226\055\172\001\002\000\034\004\uffa7\011\uffa7\012\uffa7" +
    "\014\uffa7\016\uffa7\042\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\056\uffa7\057\uffa7\001\002\000\066\004\uffbb" +
    "\013\uffbb\020\uffbb\021\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\045\uffbb\046\uffbb\051\uffbb\054\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002" +
    "\000\004\014\232\001\002\000\034\004\uffa5\011\uffa5\012" +
    "\uffa5\014\uffa5\016\uffa5\042\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\056\uffa5\057\uffa5\001\002\000\034\004" +
    "\uffa6\011\uffa6\012\uffa6\014\uffa6\016\uffa6\042\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\056\uffa6\057\uffa6\001" +
    "\002\000\004\014\235\001\002\000\034\004\uffa4\011\uffa4" +
    "\012\uffa4\014\uffa4\016\uffa4\042\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\056\uffa4\057\uffa4\001\002\000\034" +
    "\004\uffa3\011\uffa3\012\uffa3\014\uffa3\016\uffa3\042\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\056\uffa3\057\uffa3" +
    "\001\002\000\034\004\uffaa\011\110\012\uffaa\014\uffaa\016" +
    "\uffaa\042\112\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\056\uffaa\057\uffaa\001\002\000\026\011\110\014\240\042" +
    "\112\047\114\050\121\051\115\052\120\053\111\056\117" +
    "\057\116\001\002\000\034\004\uffb2\011\uffb2\012\uffb2\014" +
    "\uffb2\016\uffb2\042\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\056\uffb2\057\uffb2\001\002\000\034\004\uffa9\011" +
    "\110\012\uffa9\014\uffa9\016\uffa9\042\112\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\056\uffa9\057\uffa9\001\002\000" +
    "\040\013\045\035\053\036\077\037\062\040\052\041\035" +
    "\045\060\046\050\051\046\054\043\062\070\063\044\064" +
    "\103\065\047\066\040\001\002\000\026\011\110\014\244" +
    "\042\112\047\114\050\121\051\115\052\120\053\111\056" +
    "\117\057\116\001\002\000\062\004\054\013\045\020\030" +
    "\025\063\027\041\030\071\031\064\032\057\033\100\035" +
    "\053\036\077\037\062\040\052\041\035\045\060\046\050" +
    "\051\046\054\043\061\031\062\070\063\044\064\103\065" +
    "\047\066\040\001\002\000\066\004\uffbe\013\uffbe\020\uffbe" +
    "\021\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\045\uffbe\046\uffbe\051\uffbe\054\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000\040\013\045" +
    "\035\053\036\077\037\062\040\052\041\035\045\060\046" +
    "\050\051\046\054\043\062\070\063\044\064\103\065\047" +
    "\066\040\001\002\000\026\011\110\014\250\042\112\047" +
    "\114\050\121\051\115\052\120\053\111\056\117\057\116" +
    "\001\002\000\034\004\uffa2\011\uffa2\012\uffa2\014\uffa2\016" +
    "\uffa2\042\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\056\uffa2\057\uffa2\001\002\000\006\014\uffe7\016\255\001" +
    "\002\000\004\014\253\001\002\000\006\020\030\061\031" +
    "\001\002\000\030\002\uffed\003\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\015\uffed\017\uffed\021\uffed\024\uffed\064\uffed" +
    "\001\002\000\014\005\005\006\020\007\013\010\017\064" +
    "\015\001\002\000\004\014\uffea\001\002\000\006\014\uffe7" +
    "\016\255\001\002\000\004\014\uffe8\001\002\000\026\002" +
    "\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\015\ufff9" +
    "\017\ufff9\024\ufff9\064\ufff9\001\002\000\026\002\ufff8\003" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\015\ufff8\017\ufff8" +
    "\024\ufff8\064\ufff8\001\002\000\006\020\264\061\265\001" +
    "\002\000\020\005\uffd7\006\uffd7\007\uffd7\010\uffd7\015\uffd7" +
    "\021\uffd7\064\uffd7\001\002\000\026\002\uffd9\003\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\015\uffd9\017\uffd9\024\uffd9" +
    "\064\uffd9\001\002\000\020\005\005\006\020\007\013\010" +
    "\017\015\271\021\267\064\015\001\002\000\026\002\uffda" +
    "\003\uffda\005\uffda\006\uffda\007\uffda\010\uffda\015\uffda\017" +
    "\uffda\024\uffda\064\uffda\001\002\000\006\055\172\064\302" +
    "\001\002\000\004\064\273\001\002\000\020\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\015\uffd8\021\uffd8\064\uffd8\001\002" +
    "\000\006\013\274\060\275\001\002\000\016\005\005\006" +
    "\020\007\013\010\017\014\uffe9\064\015\001\002\000\004" +
    "\004\276\001\002\000\020\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\015\uffd3\021\uffd3\064\uffd3\001\002\000\004\014\300" +
    "\001\002\000\004\004\301\001\002\000\020\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\015\uffd5\021\uffd5\064\uffd5\001\002" +
    "\000\006\013\303\060\304\001\002\000\016\005\005\006" +
    "\020\007\013\010\017\014\uffe9\064\015\001\002\000\004" +
    "\004\305\001\002\000\020\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\015\uffd4\021\uffd4\064\uffd4\001\002\000\004\014\307" +
    "\001\002\000\004\004\310\001\002\000\020\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\015\uffd6\021\uffd6\064\uffd6\001\002" +
    "\000\012\020\uffe3\022\313\023\uffe3\061\uffe3\001\002\000" +
    "\010\020\uffe1\023\316\061\uffe1\001\002\000\004\064\314" +
    "\001\002\000\010\020\uffe4\023\uffe4\061\uffe4\001\002\000" +
    "\006\020\323\061\324\001\002\000\004\064\317\001\002" +
    "\000\010\016\uffe0\020\uffe0\061\uffe0\001\002\000\010\016" +
    "\321\020\uffe2\061\uffe2\001\002\000\004\064\322\001\002" +
    "\000\010\016\uffdf\020\uffdf\061\uffdf\001\002\000\020\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\015\uffdd\021\uffdd\064\uffdd" +
    "\001\002\000\026\002\uffe5\003\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\015\uffe5\017\uffe5\024\uffe5\064\uffe5\001\002" +
    "\000\020\005\005\006\020\007\013\010\017\015\023\021" +
    "\326\064\015\001\002\000\026\002\uffe6\003\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\015\uffe6\017\uffe6\024\uffe6\064" +
    "\uffe6\001\002\000\020\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\015\uffdc\021\uffdc\064\uffdc\001\002\000\020\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\015\uffde\021\uffde\064\uffde\001\002" +
    "\000\020\005\uffdb\006\uffdb\007\uffdb\010\uffdb\015\uffdb\021" +
    "\uffdb\064\uffdb\001\002\000\004\002\001\001\002\000\106" +
    "\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\024\ufff7" +
    "\025\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\045\ufff7\046\ufff7" +
    "\051\ufff7\054\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\001\002\000\026\002\000\003\022\005\005" +
    "\006\020\007\013\010\017\015\023\017\014\024\021\064" +
    "\015\001\002\000\026\002\uffff\003\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\015\uffff\017\uffff\024\uffff\064\uffff\001" +
    "\002\000\010\004\ufff6\013\337\060\340\001\002\000\016" +
    "\005\005\006\020\007\013\010\017\014\uffe9\064\015\001" +
    "\002\000\006\020\030\061\031\001\002\000\030\002\uffec" +
    "\003\uffec\005\uffec\006\uffec\007\uffec\010\uffec\015\uffec\017" +
    "\uffec\021\uffec\024\uffec\064\uffec\001\002\000\004\014\343" +
    "\001\002\000\006\020\uffef\061\uffef\001\002\000\006\020" +
    "\030\061\031\001\002\000\030\002\uffee\003\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\015\uffee\017\uffee\021\uffee\024" +
    "\uffee\064\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\022\002\011\004\007\005\006\007\010\010" +
    "\003\011\023\014\015\022\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\250\010\072\012\251" +
    "\001\001\000\004\025\031\001\001\000\004\006\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\066" +
    "\007\010\010\072\025\055\026\071\027\073\030\060\032" +
    "\050\033\036\034\033\035\075\036\041\037\064\042\065" +
    "\043\074\046\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\240\042" +
    "\065\043\074\046\035\001\001\000\002\001\001\000\012" +
    "\037\236\042\065\043\074\046\035\001\001\000\012\037" +
    "\235\042\065\043\074\046\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\175" +
    "\040\210\042\065\043\074\046\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\025\055\026\071\027\173\030" +
    "\060\032\050\033\036\034\033\035\075\036\041\037\064" +
    "\042\065\043\074\046\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\037\101\042\065\043" +
    "\074\046\035\001\001\000\004\041\162\001\001\000\002" +
    "\001\001\000\014\037\106\042\065\043\074\045\105\046" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\112\001\001\000\012\037\157\042\065\043\074\046" +
    "\035\001\001\000\012\037\156\042\065\043\074\046\035" +
    "\001\001\000\004\044\135\001\001\000\002\001\001\000" +
    "\012\037\131\042\065\043\074\046\035\001\001\000\012" +
    "\037\130\042\065\043\074\046\035\001\001\000\012\037" +
    "\127\042\065\043\074\046\035\001\001\000\012\037\126" +
    "\042\065\043\074\046\035\001\001\000\012\037\125\042" +
    "\065\043\074\046\035\001\001\000\012\037\124\042\065" +
    "\043\074\046\035\001\001\000\012\037\122\042\065\043" +
    "\074\046\035\001\001\000\004\041\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\106\042\065\043\074\045\140" +
    "\046\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\106\042\065\043\074\045\144" +
    "\046\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\037\147\042\065\043\074\046\035" +
    "\001\001\000\002\001\001\000\012\037\151\042\065\043" +
    "\074\046\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\154\042\065\043\074\046\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\037\175\040\176\042\065\043\074\046\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\200\042\065" +
    "\043\074\046\035\001\001\000\002\001\001\000\014\037" +
    "\175\040\202\042\065\043\074\046\035\001\001\000\002" +
    "\001\001\000\032\025\055\026\204\030\060\032\050\033" +
    "\036\034\033\035\075\036\041\037\064\042\065\043\074" +
    "\046\035\001\001\000\002\001\001\000\012\037\206\042" +
    "\065\043\074\046\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\037" +
    "\213\042\065\043\074\046\035\001\001\000\002\001\001" +
    "\000\032\025\055\026\215\030\060\032\050\033\036\034" +
    "\033\035\075\036\041\037\064\042\065\043\074\046\035" +
    "\001\001\000\004\031\217\001\001\000\032\025\055\026" +
    "\220\030\060\032\050\033\036\034\033\035\075\036\041" +
    "\037\064\042\065\043\074\046\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\222\042\065\043\074" +
    "\046\035\001\001\000\002\001\001\000\004\010\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\037\242\042\065\043\074\046\035\001\001" +
    "\000\002\001\001\000\032\025\055\026\244\030\060\032" +
    "\050\033\036\034\033\035\075\036\041\037\064\042\065" +
    "\043\074\046\035\001\001\000\002\001\001\000\012\037" +
    "\246\042\065\043\074\046\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\255\001\001\000\002\001" +
    "\001\000\004\025\253\001\001\000\002\001\001\000\006" +
    "\007\256\010\072\001\001\000\002\001\001\000\004\013" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\265\001\001\000" +
    "\002\001\001\000\006\010\267\023\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\250\010\072\012\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\250\010\072\012\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\311\001\001\000\004\016" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\324\001\001\000\002\001\001\000\014\005\326\007" +
    "\010\010\003\011\330\020\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\334\005\006" +
    "\007\010\010\003\011\023\014\015\022\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\250\010\072" +
    "\012\341\001\001\000\004\025\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\343\001\001\000\004" +
    "\025\344\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Hashtable<String, symbol> symbolTable = new Hashtable<String, symbol>();
    public static List<logs> Log = new  ArrayList<logs>();
    
    public ArrayList<String> SyntacticErrors = new ArrayList<String>();
    public int count = 0;

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m1*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public Hashtable<String, symbol> getHashTable(){
         return symbolTable;
     }
     
     public List<logs> getLog (){
         return Log;
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


                Diccionario exec = new Diccionario();

                public int context = 0, cMin = 0, ambito = 0;
                public String parametros = "", clase = "null";
            
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= sNull 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= stringConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= boolConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= doubleConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Constant ::= integerConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Actuals ::= Expr ExprRepeat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LibCall ::= sSetByte OpeningParenthesis Expr comma Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LibCall ::= sGetByte OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Call ::= Expr dot LibCall Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Call ::= Expr dot LibCall OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Call ::= Expr dot ident Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Call ::= Expr dot ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Call ::= ident Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Call ::= ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LValue ::= Expr OpeningBracket Expr ClosedBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LValue ::= Expr dot ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LValue ::= ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= sMalloc OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= sReadLine OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= sReadLine Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= sReadInteger Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= sReadInteger OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= sNewArray OpeningParenthesis Expr comma Type ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= sNew OpeningParenthesis ident ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= denial Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr ComparisonOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr equality Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr or Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr and Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr sum Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr ArithmeticOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= sThis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= LValue assignment Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExprRepeat ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExprRepeat ::= comma Expr ExprRepeat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PrintStmt ::= sPrint OpeningParenthesis Expr ExprRepeat ClosedParenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BreakStmt ::= sBreak pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ReturnStmt ::= sReturn ExprOZ pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ForStmt ::= lFor OpeningParenthesis ExprOZ pyc Expr pyc ExprOZ ClosedParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WhileStmt ::= lWhile OpeningParenthesis Expr ClosedParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ElseStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ElseStmt ::= cElse Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IfStmt ::= cIf OpeningParenthesis Expr ClosedParenthesis Stmt ElseStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprOZ ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExprOZ ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= Expr pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StmtAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtAux ::= Stmt StmtAux 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VariableDeclAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VariableDeclAux ::= VariableDeclAux VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtBlock ::= CurlyBrackets 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtBlock ::= OpeningCurlyBracket VariableDeclAux StmtAux ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prototype ::= sVoid ident Parenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype ::= Type ident Parenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= sVoid ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= Type ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RepeatablePrototype ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RepeatablePrototype ::= RepeatablePrototype Prototype 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceDecl ::= sInterface ident CurlyBrackets 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InterfaceDecl ::= sInterface ident OpeningCurlyBracket RepeatablePrototype ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RepeatableField ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RepeatableField ::= RepeatableField Field 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MultipleIdents ::= MultipleIdents comma ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MultipleIdents ::= ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ImpIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ImpIdent ::= sImplements MultipleIdents 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExtIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExtIdent ::= sExtends ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= sClass ident ExtIdent ImpIdent CurlyBrackets 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= sClass ident ExtIdent ImpIdent OpeningCurlyBracket RepeatableField ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RepeatVariable ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RepeatVariable ::= comma Variable RepeatVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= Variable RepeatVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDecl ::= sVoid ident Parenthesis StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= Type ident Parenthesis StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= sVoid ident OpeningParenthesis Formals ClosedParenthesis StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= Type ident OpeningParenthesis Formals ClosedParenthesis NT$0 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[32m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXISTS***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type Brackets 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = tipo+"[]"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
             if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                RESULT = nombre.toString(); 
             }
             else{
                System.out.println("\033[32m***ERROR: IDENTIFIER "+ nombre.toString() +" DOES NOT EXIST***");
                //throw new Error("Impossible to continue.");
                //RESULT = "";
             }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[32m***ERROR: SYMBOL "+ nombre.toString() +"IS ALREADY EXISTS***");
                else{
                    Sintactico.symbolTable.put(nombre.toString(), new symbol (nombre.toString(), tipo.toString(), ambito, clase));
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), tipo.toString(), "", ambito, clase));
                } 
                RESULT = tipo.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramA ::= ProgramA Decl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl ProgramA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

