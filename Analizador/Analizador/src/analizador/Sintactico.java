
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 17 15:09:04 CST 2018
//----------------------------------------------------

package analizador;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 17 15:09:04 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\005\004\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\004\000\002\047\002" +
    "\000\002\011\011\000\002\050\002\000\002\011\011\000" +
    "\002\051\002\000\002\011\007\000\002\052\002\000\002" +
    "\011\007\000\002\012\004\000\002\012\002\000\002\013" +
    "\005\000\002\013\002\000\002\053\002\000\002\054\002" +
    "\000\002\014\013\000\002\014\007\000\002\015\004\000" +
    "\002\015\002\000\002\016\004\000\002\016\002\000\002" +
    "\017\003\000\002\017\005\000\002\021\004\000\002\021" +
    "\002\000\002\020\003\000\002\020\003\000\002\055\002" +
    "\000\002\056\002\000\002\022\011\000\002\057\002\000" +
    "\002\022\006\000\002\024\004\000\002\024\002\000\002" +
    "\023\010\000\002\023\010\000\002\023\006\000\002\023" +
    "\006\000\002\025\006\000\002\025\003\000\002\006\004" +
    "\000\002\006\002\000\002\027\004\000\002\027\002\000" +
    "\002\026\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\040\003" +
    "\000\002\040\002\000\002\030\010\000\002\031\004\000" +
    "\002\031\002\000\002\032\007\000\002\033\013\000\002" +
    "\034\005\000\002\035\004\000\002\036\010\000\002\041" +
    "\005\000\002\041\002\000\002\037\005\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\037\004" +
    "\000\002\037\006\000\002\037\010\000\002\037\005\000" +
    "\002\037\004\000\002\037\004\000\002\037\005\000\002" +
    "\037\006\000\002\042\003\000\002\042\005\000\002\042" +
    "\006\000\002\043\006\000\002\043\004\000\002\043\010" +
    "\000\002\043\006\000\002\043\010\000\002\043\006\000" +
    "\002\044\006\000\002\044\010\000\002\045\004\000\002" +
    "\045\002\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\024\003\022\005\005\006\020\007\013\010" +
    "\017\015\023\017\014\024\021\065\015\001\002\000\006" +
    "\056\173\065\345\001\002\000\010\014\ufff5\056\ufff5\065" +
    "\ufff5\001\002\000\026\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\015\ufffa\017\ufffa\024\ufffa\065\ufffa\001" +
    "\002\000\026\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\015\ufffd\017\ufffd\024\ufffd\065\ufffd\001\002\000" +
    "\026\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\015\ufffe\017\ufffe\024\ufffe\065\ufffe\001\002\000\004\004" +
    "\342\001\002\000\004\002\341\001\002\000\010\014\ufff3" +
    "\056\ufff3\065\ufff3\001\002\000\004\065\316\001\002\000" +
    "\010\014\ufff1\056\ufff1\065\ufff1\001\002\000\026\002\ufffb" +
    "\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\015\ufffb\017" +
    "\ufffb\024\ufffb\065\ufffb\001\002\000\010\014\ufff2\056\ufff2" +
    "\065\ufff2\001\002\000\010\014\ufff4\056\ufff4\065\ufff4\001" +
    "\002\000\004\065\265\001\002\000\006\004\263\021\264" +
    "\001\002\000\004\065\025\001\002\000\026\002\ufffc\003" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\015\ufffc\017\ufffc" +
    "\024\ufffc\065\ufffc\001\002\000\006\013\026\061\027\001" +
    "\002\000\016\005\005\006\020\007\013\010\017\014\uffe6" +
    "\065\015\001\002\000\006\020\uffe9\062\uffe9\001\002\000" +
    "\006\020\031\062\032\001\002\000\074\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\013\uffc7\020\uffc7\021\uffc7\025" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\052\uffc7\055\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\001\002\000\110\002\uffc9\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\013\uffc9\015\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9\055" +
    "\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002" +
    "\000\030\002\uffe8\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\015\uffe8\017\uffe8\021\uffe8\024\uffe8\065\uffe8\001\002" +
    "\000\074\004\056\005\005\006\020\007\013\010\017\013" +
    "\046\020\031\021\uffc5\025\063\027\043\030\072\031\065" +
    "\032\060\033\101\035\054\036\100\037\064\040\053\041" +
    "\036\045\062\046\051\047\050\052\047\055\044\062\032" +
    "\064\070\065\055\066\045\067\041\001\002\000\066\004" +
    "\uffbe\013\uffbe\020\uffbe\021\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\045\uffbe\046\uffbe\047\uffbe\052\uffbe" +
    "\055\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\001" +
    "\002\000\004\013\247\001\002\000\034\004\uffae\011\uffae" +
    "\012\uffae\014\uffae\016\uffae\042\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\057\uffae\060\uffae\001\002\000\066" +
    "\004\uffc0\013\uffc0\020\uffc0\021\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\045\uffc0\046\uffc0\047\uffc0\052" +
    "\uffc0\055\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\001\002\000\034\004\uff8b\011\uff8b\012\uff8b\014\uff8b\016" +
    "\uff8b\042\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\057\uff8b\060\uff8b\001\002\000\066\004\uffbd\013\uffbd\020" +
    "\uffbd\021\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\052\uffbd\055\uffbd\062\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000\004\013" +
    "\243\001\002\000\040\013\046\035\054\036\100\037\064" +
    "\040\053\041\036\045\062\046\051\047\050\052\047\055" +
    "\044\064\070\065\104\066\045\067\041\001\002\000\034" +
    "\004\uff89\011\uff89\012\uff89\014\uff89\016\uff89\042\uff89\050" +
    "\uff89\051\uff89\052\uff89\053\uff89\054\uff89\057\uff89\060\uff89" +
    "\001\002\000\040\013\046\035\054\036\100\037\064\040" +
    "\053\041\036\045\062\046\051\047\050\052\047\055\044" +
    "\064\070\065\104\066\045\067\041\001\002\000\040\013" +
    "\046\035\054\036\100\037\064\040\053\041\036\045\062" +
    "\046\051\047\050\052\047\055\044\064\070\065\104\066" +
    "\045\067\041\001\002\000\034\004\uff8a\011\uff8a\012\uff8a" +
    "\014\uff8a\016\uff8a\042\uff8a\050\uff8a\051\uff8a\052\uff8a\053" +
    "\uff8a\054\uff8a\057\uff8a\060\uff8a\001\002\000\006\013\234" +
    "\061\235\001\002\000\066\004\uffc1\013\uffc1\020\uffc1\021" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\052\uffc1\055\uffc1\062\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\001\002\000\006\013\231\061" +
    "\232\001\002\000\034\004\uffac\011\uffac\012\uffac\014\uffac" +
    "\016\uffac\042\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\057\uffac\060\uffac\001\002\000\040\004\uff99\011\uff99" +
    "\013\105\034\uff99\042\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\056\ufff1\057\uff99\060\uff99\061\106\065\ufff1" +
    "\001\002\000\066\004\uffc3\013\uffc3\020\uffc3\021\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\052\uffc3\055\uffc3\062\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\001\002\000\066\004\uffbc\013\uffbc\020" +
    "\uffbc\021\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\052\uffbc\055\uffbc\062\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002\000\004\004" +
    "\230\001\002\000\066\004\uffc2\013\uffc2\020\uffc2\021\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\052\uffc2\055\uffc2\062\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\001\002\000\034\004\uff88\011\uff88" +
    "\012\uff88\014\uff88\016\uff88\042\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\054\uff88\057\uff88\060\uff88\001\002\000\004" +
    "\013\221\001\002\000\004\013\214\001\002\000\042\004" +
    "\uffba\013\046\035\054\036\100\037\064\040\053\041\036" +
    "\045\062\046\051\047\050\052\047\055\044\064\070\065" +
    "\104\066\045\067\041\001\002\000\026\004\211\011\111" +
    "\042\113\050\115\051\122\052\116\053\121\054\112\057" +
    "\120\060\117\001\002\000\036\004\uffad\011\uffad\012\uffad" +
    "\014\uffad\016\uffad\034\207\042\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\057\uffad\060\uffad\001\002\000\034" +
    "\004\uff8c\011\uff8c\012\uff8c\014\uff8c\016\uff8c\042\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\057\uff8c\060\uff8c" +
    "\001\002\000\074\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\013\uffc8\020\uffc8\021\uffc8\025\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\045\uffc8\046\uffc8\047\uffc8\052\uffc8\055\uffc8" +
    "\062\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002\000" +
    "\004\013\176\001\002\000\064\004\056\013\046\020\031" +
    "\021\uffc5\025\063\027\043\030\072\031\065\032\060\033" +
    "\101\035\054\036\100\037\064\040\053\041\036\045\062" +
    "\046\051\047\050\052\047\055\044\062\032\064\070\065" +
    "\104\066\045\067\041\001\002\000\006\056\173\065\174" +
    "\001\002\000\004\021\172\001\002\000\034\004\uffab\011" +
    "\uffab\012\uffab\014\uffab\016\uffab\042\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\057\uffab\060\uffab\001\002\000" +
    "\066\004\uffbf\013\uffbf\020\uffbf\021\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\052\uffbf\055\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\001\002\000\004\013\167\001\002\000\004\013\102" +
    "\001\002\000\040\013\046\035\054\036\100\037\064\040" +
    "\053\041\036\045\062\046\051\047\050\052\047\055\044" +
    "\064\070\065\104\066\045\067\041\001\002\000\030\011" +
    "\111\014\uffb0\016\123\042\113\050\115\051\122\052\116" +
    "\053\121\054\112\057\120\060\117\001\002\000\042\004" +
    "\uff99\011\uff99\012\uff99\013\105\014\uff99\016\uff99\034\uff99" +
    "\042\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\057" +
    "\uff99\060\uff99\061\106\001\002\000\042\013\046\014\uff8d" +
    "\035\054\036\100\037\064\040\053\041\036\045\062\046" +
    "\051\047\050\052\047\055\044\064\070\065\104\066\045" +
    "\067\041\001\002\000\034\004\uff95\011\uff95\012\uff95\014" +
    "\uff95\016\uff95\042\uff95\050\uff95\051\uff95\052\uff95\053\uff95" +
    "\054\uff95\057\uff95\060\uff95\001\002\000\004\014\163\001" +
    "\002\000\030\011\111\014\uffb0\016\123\042\113\050\115" +
    "\051\122\052\116\053\121\054\112\057\120\060\117\001" +
    "\002\000\040\013\046\035\054\036\100\037\064\040\053" +
    "\041\036\045\062\046\051\047\050\052\047\055\044\064" +
    "\070\065\104\066\045\067\041\001\002\000\040\013\046" +
    "\035\054\036\100\037\064\040\053\041\036\045\062\046" +
    "\051\047\050\052\047\055\044\064\070\065\104\066\045" +
    "\067\041\001\002\000\010\043\134\044\135\065\136\001" +
    "\002\000\004\014\uff8e\001\002\000\040\013\046\035\054" +
    "\036\100\037\064\040\053\041\036\045\062\046\051\047" +
    "\050\052\047\055\044\064\070\065\104\066\045\067\041" +
    "\001\002\000\040\013\046\035\054\036\100\037\064\040" +
    "\053\041\036\045\062\046\051\047\050\052\047\055\044" +
    "\064\070\065\104\066\045\067\041\001\002\000\040\013" +
    "\046\035\054\036\100\037\064\040\053\041\036\045\062" +
    "\046\051\047\050\052\047\055\044\064\070\065\104\066" +
    "\045\067\041\001\002\000\040\013\046\035\054\036\100" +
    "\037\064\040\053\041\036\045\062\046\051\047\050\052" +
    "\047\055\044\064\070\065\104\066\045\067\041\001\002" +
    "\000\040\013\046\035\054\036\100\037\064\040\053\041" +
    "\036\045\062\046\051\047\050\052\047\055\044\064\070" +
    "\065\104\066\045\067\041\001\002\000\040\013\046\035" +
    "\054\036\100\037\064\040\053\041\036\045\062\046\051" +
    "\047\050\052\047\055\044\064\070\065\104\066\045\067" +
    "\041\001\002\000\040\013\046\035\054\036\100\037\064" +
    "\040\053\041\036\045\062\046\051\047\050\052\047\055" +
    "\044\064\070\065\104\066\045\067\041\001\002\000\030" +
    "\011\111\014\uffb0\016\123\042\113\050\115\051\122\052" +
    "\116\053\121\054\112\057\120\060\117\001\002\000\004" +
    "\014\uffb1\001\002\000\030\004\uffa4\011\111\012\uffa4\014" +
    "\uffa4\016\uffa4\042\113\052\116\053\121\054\112\057\uffa4" +
    "\060\uffa4\001\002\000\034\004\uffa8\011\111\012\uffa8\014" +
    "\uffa8\016\uffa8\042\113\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\054\uffa8\057\uffa8\060\uffa8\001\002\000\034\004\uffa6\011" +
    "\111\012\uffa6\014\uffa6\016\uffa6\042\113\050\115\051\122" +
    "\052\116\053\121\054\112\057\uffa6\060\uffa6\001\002\000" +
    "\034\004\uffa5\011\111\012\uffa5\014\uffa5\016\uffa5\042\113" +
    "\050\115\051\122\052\116\053\121\054\112\057\uffa5\060" +
    "\uffa5\001\002\000\034\004\uffa7\011\111\012\uffa7\014\uffa7" +
    "\016\uffa7\042\113\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\057\uffa7\060\uffa7\001\002\000\030\004\uffa3\011\111" +
    "\012\uffa3\014\uffa3\016\uffa3\042\113\052\116\053\121\054" +
    "\112\057\uffa3\060\uffa3\001\002\000\004\013\155\001\002" +
    "\000\004\013\150\001\002\000\042\004\uff98\011\uff98\012" +
    "\uff98\013\144\014\uff98\016\uff98\034\uff98\042\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\057\uff98\060\uff98\061" +
    "\145\001\002\000\006\013\140\061\141\001\002\000\042" +
    "\013\046\014\uff8d\035\054\036\100\037\064\040\053\041" +
    "\036\045\062\046\051\047\050\052\047\055\044\064\070" +
    "\065\104\066\045\067\041\001\002\000\034\004\uff91\011" +
    "\uff91\012\uff91\014\uff91\016\uff91\042\uff91\050\uff91\051\uff91" +
    "\052\uff91\053\uff91\054\uff91\057\uff91\060\uff91\001\002\000" +
    "\004\014\143\001\002\000\034\004\uff92\011\uff92\012\uff92" +
    "\014\uff92\016\uff92\042\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\057\uff92\060\uff92\001\002\000\042\013\046" +
    "\014\uff8d\035\054\036\100\037\064\040\053\041\036\045" +
    "\062\046\051\047\050\052\047\055\044\064\070\065\104" +
    "\066\045\067\041\001\002\000\034\004\uff93\011\uff93\012" +
    "\uff93\014\uff93\016\uff93\042\uff93\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\057\uff93\060\uff93\001\002\000\004\014" +
    "\147\001\002\000\034\004\uff94\011\uff94\012\uff94\014\uff94" +
    "\016\uff94\042\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\057\uff94\060\uff94\001\002\000\040\013\046\035\054" +
    "\036\100\037\064\040\053\041\036\045\062\046\051\047" +
    "\050\052\047\055\044\064\070\065\104\066\045\067\041" +
    "\001\002\000\026\011\111\016\152\042\113\050\115\051" +
    "\122\052\116\053\121\054\112\057\120\060\117\001\002" +
    "\000\040\013\046\035\054\036\100\037\064\040\053\041" +
    "\036\045\062\046\051\047\050\052\047\055\044\064\070" +
    "\065\104\066\045\067\041\001\002\000\026\011\111\014" +
    "\154\042\113\050\115\051\122\052\116\053\121\054\112" +
    "\057\120\060\117\001\002\000\006\013\uff8f\061\uff8f\001" +
    "\002\000\040\013\046\035\054\036\100\037\064\040\053" +
    "\041\036\045\062\046\051\047\050\052\047\055\044\064" +
    "\070\065\104\066\045\067\041\001\002\000\026\011\111" +
    "\014\157\042\113\050\115\051\122\052\116\053\121\054" +
    "\112\057\120\060\117\001\002\000\006\013\uff90\061\uff90" +
    "\001\002\000\034\004\uffa9\011\111\012\uffa9\014\uffa9\016" +
    "\uffa9\042\113\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\057\uffa9\060\uffa9\001\002\000\026\011\111\012\162\042" +
    "\113\050\115\051\122\052\116\053\121\054\112\057\120" +
    "\060\117\001\002\000\036\004\uff97\011\uff97\012\uff97\014" +
    "\uff97\016\uff97\034\uff97\042\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\057\uff97\060\uff97\001\002\000\034\004" +
    "\uff96\011\uff96\012\uff96\014\uff96\016\uff96\042\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\057\uff96\060\uff96\001" +
    "\002\000\004\014\165\001\002\000\004\004\166\001\002" +
    "\000\066\004\uffb2\013\uffb2\020\uffb2\021\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\052\uffb2\055\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\067\uffb2\001\002\000\004\065\170\001\002\000\004\014" +
    "\171\001\002\000\034\004\uffa0\011\uffa0\012\uffa0\014\uffa0" +
    "\016\uffa0\042\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\057\uffa0\060\uffa0\001\002\000\110\002\uffca\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\013\uffca\015" +
    "\uffca\017\uffca\020\uffca\021\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\045\uffca\046\uffca\047\uffca" +
    "\052\uffca\055\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\001\002\000\010\014\ufff0\056\ufff0\065\ufff0\001\002" +
    "\000\010\004\ufff6\014\ufff6\016\ufff6\001\002\000\004\021" +
    "\uffc6\001\002\000\042\004\uffba\013\046\035\054\036\100" +
    "\037\064\040\053\041\036\045\062\046\051\047\050\052" +
    "\047\055\044\064\070\065\104\066\045\067\041\001\002" +
    "\000\030\004\uffbb\011\111\014\uffbb\042\113\050\115\051" +
    "\122\052\116\053\121\054\112\057\120\060\117\001\002" +
    "\000\004\004\201\001\002\000\040\013\046\035\054\036" +
    "\100\037\064\040\053\041\036\045\062\046\051\047\050" +
    "\052\047\055\044\064\070\065\104\066\045\067\041\001" +
    "\002\000\026\004\203\011\111\042\113\050\115\051\122" +
    "\052\116\053\121\054\112\057\120\060\117\001\002\000" +
    "\042\013\046\014\uffba\035\054\036\100\037\064\040\053" +
    "\041\036\045\062\046\051\047\050\052\047\055\044\064" +
    "\070\065\104\066\045\067\041\001\002\000\004\014\205" +
    "\001\002\000\062\004\056\013\046\020\031\025\063\027" +
    "\043\030\072\031\065\032\060\033\101\035\054\036\100" +
    "\037\064\040\053\041\036\045\062\046\051\047\050\052" +
    "\047\055\044\062\032\064\070\065\104\066\045\067\041" +
    "\001\002\000\066\004\uffb5\013\uffb5\020\uffb5\021\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\052\uffb5\055\uffb5\062\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\067\uffb5\001\002\000\040\013\046\035\054\036" +
    "\100\037\064\040\053\041\036\045\062\046\051\047\050" +
    "\052\047\055\044\064\070\065\104\066\045\067\041\001" +
    "\002\000\034\004\uffaf\011\111\012\uffaf\014\uffaf\016\uffaf" +
    "\042\113\050\115\051\122\052\116\053\121\054\112\057" +
    "\120\060\117\001\002\000\066\004\uffc4\013\uffc4\020\uffc4" +
    "\021\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\052\uffc4\055\uffc4\062\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\067\uffc4\001\002\000\004\004\213" +
    "\001\002\000\066\004\uffb4\013\uffb4\020\uffb4\021\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\052\uffb4\055\uffb4\062\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\001\002\000\040\013\046\035\054\036" +
    "\100\037\064\040\053\041\036\045\062\046\051\047\050" +
    "\052\047\055\044\064\070\065\104\066\045\067\041\001" +
    "\002\000\026\011\111\016\216\042\113\050\115\051\122" +
    "\052\116\053\121\054\112\057\120\060\117\001\002\000" +
    "\014\005\005\006\020\007\013\010\017\065\015\001\002" +
    "\000\006\014\220\056\173\001\002\000\034\004\uff9f\011" +
    "\uff9f\012\uff9f\014\uff9f\016\uff9f\042\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\057\uff9f\060\uff9f\001\002\000" +
    "\040\013\046\035\054\036\100\037\064\040\053\041\036" +
    "\045\062\046\051\047\050\052\047\055\044\064\070\065" +
    "\104\066\045\067\041\001\002\000\026\011\111\014\223" +
    "\042\113\050\115\051\122\052\116\053\121\054\112\057" +
    "\120\060\117\001\002\000\062\004\056\013\046\020\031" +
    "\025\063\027\043\030\072\031\065\032\060\033\101\035" +
    "\054\036\100\037\064\040\053\041\036\045\062\046\051" +
    "\047\050\052\047\055\044\062\032\064\070\065\104\066" +
    "\045\067\041\001\002\000\066\004\uffb7\013\uffb7\020\uffb7" +
    "\021\uffb7\025\uffb7\026\225\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\052\uffb7\055\uffb7\062\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\067\uffb7\001\002\000\062\004\056" +
    "\013\046\020\031\025\063\027\043\030\072\031\065\032" +
    "\060\033\101\035\054\036\100\037\064\040\053\041\036" +
    "\045\062\046\051\047\050\052\047\055\044\062\032\064" +
    "\070\065\104\066\045\067\041\001\002\000\066\004\uffb9" +
    "\013\uffb9\020\uffb9\021\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\045\uffb9\046\uffb9\047\uffb9\052\uffb9\055" +
    "\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\001\002" +
    "\000\066\004\uffb8\013\uffb8\020\uffb8\021\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\045\uffb8\046\uffb8\047" +
    "\uffb8\052\uffb8\055\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\001\002\000\066\004\uffb3\013\uffb3\020\uffb3\021" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\052\uffb3\055\uffb3\062\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\001\002\000\004\014\233\001" +
    "\002\000\034\004\uff9d\011\uff9d\012\uff9d\014\uff9d\016\uff9d" +
    "\042\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\057" +
    "\uff9d\060\uff9d\001\002\000\034\004\uff9e\011\uff9e\012\uff9e" +
    "\014\uff9e\016\uff9e\042\uff9e\050\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\057\uff9e\060\uff9e\001\002\000\004\014\236" +
    "\001\002\000\034\004\uff9c\011\uff9c\012\uff9c\014\uff9c\016" +
    "\uff9c\042\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\057\uff9c\060\uff9c\001\002\000\034\004\uff9b\011\uff9b\012" +
    "\uff9b\014\uff9b\016\uff9b\042\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\057\uff9b\060\uff9b\001\002\000\034\004" +
    "\uffa2\011\111\012\uffa2\014\uffa2\016\uffa2\042\113\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\057\uffa2\060\uffa2\001" +
    "\002\000\026\011\111\014\241\042\113\050\115\051\122" +
    "\052\116\053\121\054\112\057\120\060\117\001\002\000" +
    "\034\004\uffaa\011\uffaa\012\uffaa\014\uffaa\016\uffaa\042\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\057\uffaa\060" +
    "\uffaa\001\002\000\034\004\uffa1\011\111\012\uffa1\014\uffa1" +
    "\016\uffa1\042\113\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\057\uffa1\060\uffa1\001\002\000\040\013\046\035\054" +
    "\036\100\037\064\040\053\041\036\045\062\046\051\047" +
    "\050\052\047\055\044\064\070\065\104\066\045\067\041" +
    "\001\002\000\026\011\111\014\245\042\113\050\115\051" +
    "\122\052\116\053\121\054\112\057\120\060\117\001\002" +
    "\000\062\004\056\013\046\020\031\025\063\027\043\030" +
    "\072\031\065\032\060\033\101\035\054\036\100\037\064" +
    "\040\053\041\036\045\062\046\051\047\050\052\047\055" +
    "\044\062\032\064\070\065\104\066\045\067\041\001\002" +
    "\000\066\004\uffb6\013\uffb6\020\uffb6\021\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\052\uffb6\055\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\001\002\000\040\013\046\035\054\036\100\037" +
    "\064\040\053\041\036\045\062\046\051\047\050\052\047" +
    "\055\044\064\070\065\104\066\045\067\041\001\002\000" +
    "\026\011\111\014\251\042\113\050\115\051\122\052\116" +
    "\053\121\054\112\057\120\060\117\001\002\000\034\004" +
    "\uff9a\011\uff9a\012\uff9a\014\uff9a\016\uff9a\042\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\057\uff9a\060\uff9a\001" +
    "\002\000\006\014\uffe4\016\257\001\002\000\004\014\254" +
    "\001\002\000\006\020\uffed\062\uffed\001\002\000\006\020" +
    "\031\062\032\001\002\000\030\002\uffec\003\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\015\uffec\017\uffec\021\uffec\024" +
    "\uffec\065\uffec\001\002\000\014\005\005\006\020\007\013" +
    "\010\017\065\015\001\002\000\004\014\uffe7\001\002\000" +
    "\006\014\uffe4\016\257\001\002\000\004\014\uffe5\001\002" +
    "\000\026\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\015\ufff9\017\ufff9\024\ufff9\065\ufff9\001\002\000\026" +
    "\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\015" +
    "\ufff8\017\ufff8\024\ufff8\065\ufff8\001\002\000\006\020\uffd5" +
    "\062\uffd2\001\002\000\004\062\315\001\002\000\004\020" +
    "\270\001\002\000\020\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\015\uffd4\021\uffd4\065\uffd4\001\002\000\020\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\015\uffcf\021\uffcf\065\uffcf\001\002" +
    "\000\020\005\005\006\020\007\013\010\017\015\275\021" +
    "\273\065\015\001\002\000\026\002\uffd3\003\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\015\uffd3\017\uffd3\024\uffd3\065" +
    "\uffd3\001\002\000\006\056\173\065\306\001\002\000\004" +
    "\065\277\001\002\000\020\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\015\uffd0\021\uffd0\065\uffd0\001\002\000\006\013\300" +
    "\061\301\001\002\000\016\005\005\006\020\007\013\010" +
    "\017\014\uffe6\065\015\001\002\000\004\004\302\001\002" +
    "\000\020\005\uffcb\006\uffcb\007\uffcb\010\uffcb\015\uffcb\021" +
    "\uffcb\065\uffcb\001\002\000\004\014\304\001\002\000\004" +
    "\004\305\001\002\000\020\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\015\uffcd\021\uffcd\065\uffcd\001\002\000\006\013\307" +
    "\061\310\001\002\000\016\005\005\006\020\007\013\010" +
    "\017\014\uffe6\065\015\001\002\000\004\004\311\001\002" +
    "\000\020\005\uffcc\006\uffcc\007\uffcc\010\uffcc\015\uffcc\021" +
    "\uffcc\065\uffcc\001\002\000\004\014\313\001\002\000\004" +
    "\004\314\001\002\000\020\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\015\uffce\021\uffce\065\uffce\001\002\000\026\002\uffd1" +
    "\003\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\015\uffd1\017" +
    "\uffd1\024\uffd1\065\uffd1\001\002\000\012\020\uffde\022\320" +
    "\023\uffde\062\uffde\001\002\000\010\020\uffdc\023\323\062" +
    "\uffdc\001\002\000\004\065\321\001\002\000\010\020\uffdf" +
    "\023\uffdf\062\uffdf\001\002\000\006\020\uffe3\062\330\001" +
    "\002\000\004\065\324\001\002\000\010\016\uffdb\020\uffdb" +
    "\062\uffdb\001\002\000\010\016\326\020\uffdd\062\uffdd\001" +
    "\002\000\004\065\327\001\002\000\010\016\uffda\020\uffda" +
    "\062\uffda\001\002\000\026\002\uffe0\003\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\015\uffe0\017\uffe0\024\uffe0\065\uffe0" +
    "\001\002\000\004\020\332\001\002\000\020\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\015\uffe2\021\uffe2\065\uffe2\001\002" +
    "\000\020\005\uffd8\006\uffd8\007\uffd8\010\uffd8\015\uffd8\021" +
    "\uffd8\065\uffd8\001\002\000\020\005\005\006\020\007\013" +
    "\010\017\015\023\021\335\065\015\001\002\000\026\002" +
    "\uffe1\003\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\015\uffe1" +
    "\017\uffe1\024\uffe1\065\uffe1\001\002\000\020\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\015\uffd7\021\uffd7\065\uffd7\001\002" +
    "\000\020\005\uffd9\006\uffd9\007\uffd9\010\uffd9\015\uffd9\021" +
    "\uffd9\065\uffd9\001\002\000\020\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\015\uffd6\021\uffd6\065\uffd6\001\002\000\004\002" +
    "\001\001\002\000\106\002\ufff7\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\013\ufff7\015\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\024\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\052\ufff7\055\ufff7\062\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\001\002\000\026\002" +
    "\000\003\022\005\005\006\020\007\013\010\017\015\023" +
    "\017\014\024\021\065\015\001\002\000\026\002\uffff\003" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\015\uffff\017\uffff" +
    "\024\uffff\065\uffff\001\002\000\010\004\ufff6\013\346\061" +
    "\347\001\002\000\016\005\005\006\020\007\013\010\017" +
    "\014\uffe6\065\015\001\002\000\006\020\uffeb\062\uffeb\001" +
    "\002\000\006\020\031\062\032\001\002\000\030\002\uffea" +
    "\003\uffea\005\uffea\006\uffea\007\uffea\010\uffea\015\uffea\017" +
    "\uffea\021\uffea\024\uffea\065\uffea\001\002\000\004\014\353" +
    "\001\002\000\006\020\uffef\062\uffef\001\002\000\006\020" +
    "\031\062\032\001\002\000\030\002\uffee\003\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\015\uffee\017\uffee\021\uffee\024" +
    "\uffee\065\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\022\002\011\004\007\005\006\007\010\010" +
    "\003\011\023\014\015\022\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\251\010\073\012\252" +
    "\001\001\000\004\052\027\001\001\000\004\025\032\001" +
    "\001\000\004\006\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\070\007\010\010\073\025\056\026" +
    "\072\027\074\030\060\032\051\033\037\034\034\035\076" +
    "\036\041\037\065\042\066\043\075\046\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\037\241\042\066\043\075\046\036\001\001" +
    "\000\002\001\001\000\012\037\237\042\066\043\075\046" +
    "\036\001\001\000\012\037\236\042\066\043\075\046\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\037\176\040\211\042\066\043\075\046" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\025" +
    "\056\026\072\027\174\030\060\032\051\033\037\034\034" +
    "\035\076\036\041\037\065\042\066\043\075\046\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\037\102\042\066\043\075\046\036\001\001\000\004" +
    "\041\163\001\001\000\002\001\001\000\014\037\107\042" +
    "\066\043\075\045\106\046\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\113\001\001\000\012\037" +
    "\160\042\066\043\075\046\036\001\001\000\012\037\157" +
    "\042\066\043\075\046\036\001\001\000\004\044\136\001" +
    "\001\000\002\001\001\000\012\037\132\042\066\043\075" +
    "\046\036\001\001\000\012\037\131\042\066\043\075\046" +
    "\036\001\001\000\012\037\130\042\066\043\075\046\036" +
    "\001\001\000\012\037\127\042\066\043\075\046\036\001" +
    "\001\000\012\037\126\042\066\043\075\046\036\001\001" +
    "\000\012\037\125\042\066\043\075\046\036\001\001\000" +
    "\012\037\123\042\066\043\075\046\036\001\001\000\004" +
    "\041\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\107" +
    "\042\066\043\075\045\141\046\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\107" +
    "\042\066\043\075\045\145\046\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\037\150" +
    "\042\066\043\075\046\036\001\001\000\002\001\001\000" +
    "\012\037\152\042\066\043\075\046\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\037\155\042\066\043" +
    "\075\046\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\037\176\040\177\042\066\043" +
    "\075\046\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\201\042\066\043\075\046\036\001\001\000" +
    "\002\001\001\000\014\037\176\040\203\042\066\043\075" +
    "\046\036\001\001\000\002\001\001\000\032\025\056\026" +
    "\205\030\060\032\051\033\037\034\034\035\076\036\041" +
    "\037\065\042\066\043\075\046\036\001\001\000\002\001" +
    "\001\000\012\037\207\042\066\043\075\046\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\037\214\042\066\043\075\046\036" +
    "\001\001\000\002\001\001\000\004\010\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\221\042\066" +
    "\043\075\046\036\001\001\000\002\001\001\000\032\025" +
    "\056\026\223\030\060\032\051\033\037\034\034\035\076" +
    "\036\041\037\065\042\066\043\075\046\036\001\001\000" +
    "\004\031\225\001\001\000\032\025\056\026\226\030\060" +
    "\032\051\033\037\034\034\035\076\036\041\037\065\042" +
    "\066\043\075\046\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\243\042\066" +
    "\043\075\046\036\001\001\000\002\001\001\000\032\025" +
    "\056\026\245\030\060\032\051\033\037\034\034\035\076" +
    "\036\041\037\065\042\066\043\075\046\036\001\001\000" +
    "\002\001\001\000\012\037\247\042\066\043\075\046\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\257\001\001\000\002\001\001\000\004\050\254\001\001" +
    "\000\004\025\255\001\001\000\002\001\001\000\006\007" +
    "\260\010\073\001\001\000\002\001\001\000\004\013\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\266\057\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\270\001\001\000\004\024" +
    "\271\001\001\000\006\010\273\023\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\251\010\073\012\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\251\010\073\012\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\316\001" +
    "\001\000\004\016\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\330\001\001\000\004\017\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\332\001\001\000\004\021\333\001\001\000\014" +
    "\005\335\007\010\010\003\011\337\020\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\343\005\006\007\010\010\003\011\023\014\015\022\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\251\010\073\012\351\001\001\000\004\051\347\001\001" +
    "\000\004\025\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\353\001\001\000\004\025\354\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Hashtable<String, symbol> symbolTable = new Hashtable<String, symbol>();
    public static List<logs> Log = new  ArrayList<logs>();

    public static int context = 0, cMin = 0, ambito = 0;
    public static String parametros = "";

     public Hashtable<String, symbol> getHashTable(){
         return symbolTable;
     }
     
     public List<logs> getLog (){
         return Log;
     }
    
    public ArrayList<String> SyntacticErrors = new ArrayList<String>();
    public int count = 0;

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m1*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  public Diccionario exec = new Diccionario();
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Constant ::= sNull 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Constant ::= stringConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Constant ::= boolConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Constant ::= doubleConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Constant ::= integerConstant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Actuals ::= Expr ExprRepeat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LibCall ::= sSetByte OpeningParenthesis Expr comma Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LibCall ::= sGetByte OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Call ::= Expr dot LibCall Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Call ::= Expr dot LibCall OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Call ::= Expr dot ident Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Call ::= Expr dot ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Call ::= ident Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Call ::= ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LValue ::= Expr OpeningBracket Expr ClosedBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LValue ::= Expr dot ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LValue ::= ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= sMalloc OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= sReadLine OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= sReadLine Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= sReadInteger Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= sReadInteger OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= sNewArray OpeningParenthesis Expr comma Type ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= sNew OpeningParenthesis ident ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= denial Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr ComparisonOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr equality Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr or Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr and Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr sum Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr ArithmeticOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= sThis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= LValue assignment Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExprRepeat ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExprRepeat ::= comma Expr ExprRepeat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PrintStmt ::= sPrint OpeningParenthesis Expr ExprRepeat ClosedParenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BreakStmt ::= sBreak pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ReturnStmt ::= sReturn ExprOZ pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ForStmt ::= lFor OpeningParenthesis ExprOZ pyc Expr pyc ExprOZ ClosedParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WhileStmt ::= lWhile OpeningParenthesis Expr ClosedParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ElseStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ElseStmt ::= cElse Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IfStmt ::= cIf OpeningParenthesis Expr ClosedParenthesis Stmt ElseStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExprOZ ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprOZ ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= Expr pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StmtAux ::= Stmt StmtAux 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VariableDeclAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VariableDeclAux ::= VariableDeclAux VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StmtBlock ::= CurlyBrackets 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtBlock ::= OpeningCurlyBracket VariableDeclAux StmtAux ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Prototype ::= sVoid ident Parenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Prototype ::= Type ident Parenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Prototype ::= sVoid ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Prototype ::= Type ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RepeatablePrototype ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RepeatablePrototype ::= RepeatablePrototype Prototype 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InterfaceDecl ::= sInterface ident NT$8 CurlyBrackets 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$8 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 
                     if(exec.ExistsFunction(Sintactico.symbolTable, nombre)){
                        System.out.println("\033[31m***Error: Interface name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "interface", Sintactico.ambito);
                        s.AddFunction("class", "");
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "interface", "", Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    } 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InterfaceDecl ::= sInterface ident NT$6 OpeningCurlyBracket NT$7 RepeatablePrototype ClosedCurlyBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		 exec.DeleteAmbit(Sintactico.symbolTable, Sintactico.ambito); Sintactico.ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 Sintactico.ambito++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 
                     if(exec.ExistsFunction(Sintactico.symbolTable, nombre)){
                        System.out.println("\033[31m***Error: Interface name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "interface", Sintactico.ambito);
                        s.AddFunction("class", "");
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "interface", "", Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    } 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RepeatableField ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RepeatableField ::= RepeatableField Field 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MultipleIdents ::= MultipleIdents comma ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MultipleIdents ::= ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ImpIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ImpIdent ::= sImplements MultipleIdents 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExtIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExtIdent ::= sExtends ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl ::= sClass ident ExtIdent ImpIdent CurlyBrackets 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                 if(exec.ExistsFunction(Sintactico.symbolTable, nombre)){
                        System.out.println("\033[31m***Error: Method name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "class", Sintactico.ambito);
                        s.AddFunction("class", "");
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "class", "", Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    } 
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl ::= sClass ident ExtIdent ImpIdent NT$4 OpeningCurlyBracket NT$5 RepeatableField ClosedCurlyBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		 exec.DeleteAmbit(Sintactico.symbolTable, Sintactico.ambito); Sintactico.ambito--;  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 Sintactico.ambito++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
  
                if(exec.ExistsFunction(Sintactico.symbolTable, nombre)){
                        System.out.println("\033[31m***Error: Method name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "class", Sintactico.ambito);
                        s.AddFunction("class", "");
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "class", "", Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    } 
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RepeatVariable ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RepeatVariable ::= comma Variable RepeatVariable 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.parametros+= tipo+"$"; RESULT = Sintactico.parametros; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Formals ::= Variable RepeatVariable 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.parametros+=tipo+"$"; RESULT = Sintactico.parametros; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunctionDecl ::= sVoid ident Parenthesis NT$3 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                    if(exec.ExistsFunction(Sintactico.symbolTable, nombre.toString())){
                        System.out.println("\033[31m***Error: Method name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "method", Sintactico.ambito);
                        s.AddFunction("void", Sintactico.parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "method", "void", Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionDecl ::= Type ident Parenthesis NT$2 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                    if(exec.ExistsFunction(Sintactico.symbolTable, nombre.toString())){
                        System.out.println("\033[31m***Error: Function name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "function", Sintactico.ambito);
                        s.AddFunction(tipo.toString(), Sintactico.parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "function", tipo.toString(), Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= sVoid ident OpeningParenthesis Formals ClosedParenthesis NT$1 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                    if(exec.ExistsFunction(Sintactico.symbolTable, nombre.toString())){
                        System.out.println("\033[31m***Error: Method name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "method", Sintactico.ambito);
                        s.AddFunction("void", Sintactico.parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "method", "void", Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= Type ident OpeningParenthesis Formals ClosedParenthesis NT$0 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

                    if(exec.ExistsFunction(Sintactico.symbolTable, nombre.toString())){
                        System.out.println("\033[31m***Error: Function name: "+ nombre.toString() +" is already exists***");
                    }
                    else{
                        symbol s = new symbol(nombre.toString(), "function", Sintactico.ambito);
                        s.AddFunction(tipo.toString(), Sintactico.parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("Insert", nombre.toString(), "function", tipo.toString(), Sintactico.parametros, Sintactico.ambito));
                        Sintactico.parametros = "";
                    }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type Brackets 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new String(tipo.toString() + "[]"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new String(name.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new String("string"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new String("bool"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = new String("double"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = new String("int"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                if(exec.AlreadyExists(Sintactico.symbolTable, name.toString(), Sintactico.ambito, Sintactico.cMin)){
                    System.out.println("\033[31m*** Error: Variable name: "+ name.toString() +" is already exists***");
                }
                else{
                    Sintactico.symbolTable.put(name.toString(), new symbol(name.toString(), tipo.toString(), Sintactico.ambito));
                    Sintactico.Log.add(new logs("Insert", name.toString(), tipo.toString(), "", Sintactico.ambito));
                }
                RESULT = tipo;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramA ::= ProgramA Decl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl ProgramA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

