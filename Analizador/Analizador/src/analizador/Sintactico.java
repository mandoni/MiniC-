
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 19 01:21:05 CST 2018
//----------------------------------------------------

package analizador;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 19 01:21:05 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\004\000\002\005\004\000\002\007\007\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\004" +
    "\000\002\047\002\000\002\050\002\000\002\011\012\000" +
    "\002\051\002\000\002\052\002\000\002\011\012\000\002" +
    "\053\002\000\002\011\007\000\002\054\002\000\002\011" +
    "\007\000\002\012\004\000\002\012\002\000\002\013\005" +
    "\000\002\013\002\000\002\055\002\000\002\014\012\000" +
    "\002\014\007\000\002\015\004\000\002\015\002\000\002" +
    "\016\004\000\002\016\002\000\002\017\003\000\002\017" +
    "\005\000\002\021\004\000\002\021\002\000\002\020\003" +
    "\000\002\020\003\000\002\056\002\000\002\022\010\000" +
    "\002\022\005\000\002\024\004\000\002\024\002\000\002" +
    "\023\010\000\002\023\010\000\002\023\006\000\002\023" +
    "\006\000\002\025\006\000\002\025\003\000\002\006\004" +
    "\000\002\006\002\000\002\027\004\000\002\027\002\000" +
    "\002\026\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\040\003" +
    "\000\002\040\002\000\002\057\002\000\002\060\002\000" +
    "\002\030\012\000\002\061\002\000\002\031\005\000\002" +
    "\031\002\000\002\062\002\000\002\032\010\000\002\063" +
    "\002\000\002\033\014\000\002\034\005\000\002\035\004" +
    "\000\002\036\010\000\002\041\005\000\002\041\002\000" +
    "\002\037\005\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\004\000\002\037\004\000\002\037\006\000\002" +
    "\037\010\000\002\037\005\000\002\037\004\000\002\037" +
    "\004\000\002\037\005\000\002\037\006\000\002\042\003" +
    "\000\002\042\005\000\002\042\006\000\002\043\006\000" +
    "\002\043\004\000\002\043\010\000\002\043\006\000\002" +
    "\043\010\000\002\043\006\000\002\044\006\000\002\044" +
    "\010\000\002\045\004\000\002\045\002\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\026\003\015\005\014\006\004\007\025\010" +
    "\021\011\010\016\020\020\023\025\013\065\011\001\002" +
    "\000\010\015\ufff4\056\ufff4\065\ufff4\001\002\000\030\002" +
    "\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\016\ufffb\020\ufffb\025\ufffb\065\ufffb\001\002\000\030\002" +
    "\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\016\ufffe\020\ufffe\025\ufffe\065\ufffe\001\002\000\006\056" +
    "\217\065\353\001\002\000\010\015\ufff1\056\ufff1\065\ufff1" +
    "\001\002\000\010\015\ufff0\056\ufff0\065\ufff0\001\002\000" +
    "\030\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\016\ufffa\020\ufffa\025\ufffa\065\ufffa\001\002\000" +
    "\004\065\324\001\002\000\014\006\004\007\025\010\021" +
    "\011\010\065\011\001\002\000\006\004\316\022\317\001" +
    "\002\000\004\004\315\001\002\000\030\002\ufffc\003\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\016\ufffc\020" +
    "\ufffc\025\ufffc\065\ufffc\001\002\000\004\065\051\001\002" +
    "\000\010\015\ufff2\056\ufff2\065\ufff2\001\002\000\030\002" +
    "\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\016\ufffd\020\ufffd\025\ufffd\065\ufffd\001\002\000\004\065" +
    "\027\001\002\000\004\002\026\001\002\000\010\015\ufff3" +
    "\056\ufff3\065\ufff3\001\002\000\004\002\001\001\002\000" +
    "\012\021\uffdc\023\031\024\uffdc\062\uffdc\001\002\000\010" +
    "\021\uffda\024\034\062\uffda\001\002\000\004\065\032\001" +
    "\002\000\010\021\uffdd\024\uffdd\062\uffdd\001\002\000\006" +
    "\021\uffe0\062\041\001\002\000\004\065\035\001\002\000" +
    "\010\017\uffd9\021\uffd9\062\uffd9\001\002\000\010\017\037" +
    "\021\uffdb\062\uffdb\001\002\000\004\065\040\001\002\000" +
    "\010\017\uffd8\021\uffd8\062\uffd8\001\002\000\030\002\uffde" +
    "\003\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\016" +
    "\uffde\020\uffde\025\uffde\065\uffde\001\002\000\004\021\043" +
    "\001\002\000\022\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\016\uffd6\022\uffd6\065\uffd6\001\002\000\022\005\014" +
    "\006\004\007\025\010\021\011\010\016\020\022\045\065" +
    "\011\001\002\000\030\002\uffdf\003\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\016\uffdf\020\uffdf\025\uffdf\065" +
    "\uffdf\001\002\000\022\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\016\uffd5\022\uffd5\065\uffd5\001\002\000\022\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\016\uffd7\022\uffd7" +
    "\065\uffd7\001\002\000\022\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\016\uffd4\022\uffd4\065\uffd4\001\002\000\006" +
    "\014\052\061\053\001\002\000\020\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\015\uffeb\065\uffeb\001\002\000\006" +
    "\021\uffe6\062\uffe6\001\002\000\006\021\055\062\056\001" +
    "\002\000\076\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\014\uffc7\021\uffc7\022\uffc7\026\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\046\uffc7\047\uffc7\052\uffc7\055\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002" +
    "\000\112\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\014\uffc9\016\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\046\uffc9\047\uffc9\052\uffc9\055\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002\000\032" +
    "\002\uffe5\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\016\uffe5\020\uffe5\022\uffe5\025\uffe5\065\uffe5\001\002" +
    "\000\076\004\101\005\014\006\004\007\025\010\021\011" +
    "\010\014\072\021\055\022\uffc5\026\110\030\067\031\116" +
    "\032\111\033\104\034\125\036\100\037\124\040\107\041" +
    "\077\042\062\046\106\047\075\052\073\055\070\062\056" +
    "\063\114\064\071\065\102\066\074\067\065\001\002\000" +
    "\066\004\uffbe\014\uffbe\021\uffbe\022\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\046\uffbe\047\uffbe\052\uffbe" +
    "\055\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\001\002\000\004\014\300\001\002\000\034\004\uffa9" +
    "\012\uffa9\013\uffa9\015\uffa9\017\uffa9\043\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9\060\uffa9\001\002" +
    "\000\066\004\uffc0\014\uffc0\021\uffc0\022\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\046\uffc0\047\uffc0\052" +
    "\uffc0\055\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\067\uffc0\001\002\000\034\004\uff86\012\uff86\013\uff86\015" +
    "\uff86\017\uff86\043\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\057\uff86\060\uff86\001\002\000\066\004\uffbd\014" +
    "\uffbd\021\uffbd\022\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\046\uffbd\047\uffbd\052\uffbd\055\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000" +
    "\004\014\273\001\002\000\040\014\072\036\100\037\124" +
    "\040\107\041\077\042\062\046\106\047\075\052\073\055" +
    "\070\063\114\064\071\065\130\066\074\067\065\001\002" +
    "\000\034\004\uff84\012\uff84\013\uff84\015\uff84\017\uff84\043" +
    "\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\057\uff84" +
    "\060\uff84\001\002\000\040\014\072\036\100\037\124\040" +
    "\107\041\077\042\062\046\106\047\075\052\073\055\070" +
    "\063\114\064\071\065\130\066\074\067\065\001\002\000" +
    "\040\014\072\036\100\037\124\040\107\041\077\042\062" +
    "\046\106\047\075\052\073\055\070\063\114\064\071\065" +
    "\130\066\074\067\065\001\002\000\034\004\uff85\012\uff85" +
    "\013\uff85\015\uff85\017\uff85\043\uff85\050\uff85\051\uff85\052" +
    "\uff85\053\uff85\054\uff85\057\uff85\060\uff85\001\002\000\006" +
    "\014\264\061\265\001\002\000\066\004\uffc1\014\uffc1\021" +
    "\uffc1\022\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\046\uffc1\047\uffc1\052\uffc1\055\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\066\uffc1\067\uffc1\001\002\000\006\014" +
    "\261\061\262\001\002\000\034\004\uffa7\012\uffa7\013\uffa7" +
    "\015\uffa7\017\uffa7\043\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\057\uffa7\060\uffa7\001\002\000\066\004\uffc3" +
    "\014\uffc3\021\uffc3\022\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\046\uffc3\047\uffc3\052\uffc3\055\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\001\002" +
    "\000\040\004\uff94\012\uff94\014\131\035\uff94\043\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\056\ufff0\057\uff94" +
    "\060\uff94\061\132\065\ufff0\001\002\000\066\004\uffbc\014" +
    "\uffbc\021\uffbc\022\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\046\uffbc\047\uffbc\052\uffbc\055\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002\000" +
    "\004\004\260\001\002\000\066\004\uffc2\014\uffc2\021\uffc2" +
    "\022\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\046\uffc2\047\uffc2\052\uffc2\055\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\034\004\uff83" +
    "\012\uff83\013\uff83\015\uff83\017\uff83\043\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\057\uff83\060\uff83\001\002" +
    "\000\004\014\253\001\002\000\004\014\241\001\002\000" +
    "\042\004\uffba\014\072\036\100\037\124\040\107\041\077" +
    "\042\062\046\106\047\075\052\073\055\070\063\114\064" +
    "\071\065\130\066\074\067\065\001\002\000\026\004\236" +
    "\012\136\043\137\050\141\051\146\052\142\053\145\054" +
    "\135\057\144\060\143\001\002\000\036\004\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\017\uffa8\035\234\043\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8\060\uffa8\001\002" +
    "\000\034\004\uff87\012\uff87\013\uff87\015\uff87\017\uff87\043" +
    "\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\057\uff87" +
    "\060\uff87\001\002\000\076\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\014\uffc8\021\uffc8\022\uffc8\026\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\046\uffc8\047\uffc8\052\uffc8" +
    "\055\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\001\002\000\004\014\222\001\002\000\064\004\101" +
    "\014\072\021\055\022\uffc5\026\110\030\067\031\116\032" +
    "\111\033\104\034\125\036\100\037\124\040\107\041\077" +
    "\042\062\046\106\047\075\052\073\055\070\062\056\063" +
    "\114\064\071\065\130\066\074\067\065\001\002\000\006" +
    "\056\217\065\220\001\002\000\004\022\216\001\002\000" +
    "\034\004\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6\043\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6\060" +
    "\uffa6\001\002\000\066\004\uffbf\014\uffbf\021\uffbf\022\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\046\uffbf" +
    "\047\uffbf\052\uffbf\055\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\001\002\000\004\014\213\001\002" +
    "\000\004\014\126\001\002\000\040\014\072\036\100\037" +
    "\124\040\107\041\077\042\062\046\106\047\075\052\073" +
    "\055\070\063\114\064\071\065\130\066\074\067\065\001" +
    "\002\000\030\012\136\015\uffab\017\147\043\137\050\141" +
    "\051\146\052\142\053\145\054\135\057\144\060\143\001" +
    "\002\000\042\004\uff94\012\uff94\013\uff94\014\131\015\uff94" +
    "\017\uff94\035\uff94\043\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\054\uff94\057\uff94\060\uff94\061\132\001\002\000\042" +
    "\014\072\015\uff88\036\100\037\124\040\107\041\077\042" +
    "\062\046\106\047\075\052\073\055\070\063\114\064\071" +
    "\065\130\066\074\067\065\001\002\000\034\004\uff90\012" +
    "\uff90\013\uff90\015\uff90\017\uff90\043\uff90\050\uff90\051\uff90" +
    "\052\uff90\053\uff90\054\uff90\057\uff90\060\uff90\001\002\000" +
    "\004\015\207\001\002\000\030\012\136\015\uffab\017\147" +
    "\043\137\050\141\051\146\052\142\053\145\054\135\057" +
    "\144\060\143\001\002\000\040\014\072\036\100\037\124" +
    "\040\107\041\077\042\062\046\106\047\075\052\073\055" +
    "\070\063\114\064\071\065\130\066\074\067\065\001\002" +
    "\000\040\014\072\036\100\037\124\040\107\041\077\042" +
    "\062\046\106\047\075\052\073\055\070\063\114\064\071" +
    "\065\130\066\074\067\065\001\002\000\010\044\160\045" +
    "\161\065\162\001\002\000\004\015\uff89\001\002\000\040" +
    "\014\072\036\100\037\124\040\107\041\077\042\062\046" +
    "\106\047\075\052\073\055\070\063\114\064\071\065\130" +
    "\066\074\067\065\001\002\000\040\014\072\036\100\037" +
    "\124\040\107\041\077\042\062\046\106\047\075\052\073" +
    "\055\070\063\114\064\071\065\130\066\074\067\065\001" +
    "\002\000\040\014\072\036\100\037\124\040\107\041\077" +
    "\042\062\046\106\047\075\052\073\055\070\063\114\064" +
    "\071\065\130\066\074\067\065\001\002\000\040\014\072" +
    "\036\100\037\124\040\107\041\077\042\062\046\106\047" +
    "\075\052\073\055\070\063\114\064\071\065\130\066\074" +
    "\067\065\001\002\000\040\014\072\036\100\037\124\040" +
    "\107\041\077\042\062\046\106\047\075\052\073\055\070" +
    "\063\114\064\071\065\130\066\074\067\065\001\002\000" +
    "\040\014\072\036\100\037\124\040\107\041\077\042\062" +
    "\046\106\047\075\052\073\055\070\063\114\064\071\065" +
    "\130\066\074\067\065\001\002\000\040\014\072\036\100" +
    "\037\124\040\107\041\077\042\062\046\106\047\075\052" +
    "\073\055\070\063\114\064\071\065\130\066\074\067\065" +
    "\001\002\000\030\012\136\015\uffab\017\147\043\137\050" +
    "\141\051\146\052\142\053\145\054\135\057\144\060\143" +
    "\001\002\000\004\015\uffac\001\002\000\030\004\uff9f\012" +
    "\136\013\uff9f\015\uff9f\017\uff9f\043\137\052\142\053\145" +
    "\054\135\057\uff9f\060\uff9f\001\002\000\034\004\uffa3\012" +
    "\136\013\uffa3\015\uffa3\017\uffa3\043\137\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\057\uffa3\060\uffa3\001\002\000" +
    "\034\004\uffa1\012\136\013\uffa1\015\uffa1\017\uffa1\043\137" +
    "\050\141\051\146\052\142\053\145\054\135\057\uffa1\060" +
    "\uffa1\001\002\000\034\004\uffa0\012\136\013\uffa0\015\uffa0" +
    "\017\uffa0\043\137\050\141\051\146\052\142\053\145\054" +
    "\135\057\uffa0\060\uffa0\001\002\000\034\004\uffa2\012\136" +
    "\013\uffa2\015\uffa2\017\uffa2\043\137\050\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\057\uffa2\060\uffa2\001\002\000\030" +
    "\004\uff9e\012\136\013\uff9e\015\uff9e\017\uff9e\043\137\052" +
    "\142\053\145\054\135\057\uff9e\060\uff9e\001\002\000\004" +
    "\014\201\001\002\000\004\014\174\001\002\000\042\004" +
    "\uff93\012\uff93\013\uff93\014\170\015\uff93\017\uff93\035\uff93" +
    "\043\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\057" +
    "\uff93\060\uff93\061\171\001\002\000\006\014\164\061\165" +
    "\001\002\000\042\014\072\015\uff88\036\100\037\124\040" +
    "\107\041\077\042\062\046\106\047\075\052\073\055\070" +
    "\063\114\064\071\065\130\066\074\067\065\001\002\000" +
    "\034\004\uff8c\012\uff8c\013\uff8c\015\uff8c\017\uff8c\043\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\057\uff8c\060" +
    "\uff8c\001\002\000\004\015\167\001\002\000\034\004\uff8d" +
    "\012\uff8d\013\uff8d\015\uff8d\017\uff8d\043\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\057\uff8d\060\uff8d\001\002" +
    "\000\042\014\072\015\uff88\036\100\037\124\040\107\041" +
    "\077\042\062\046\106\047\075\052\073\055\070\063\114" +
    "\064\071\065\130\066\074\067\065\001\002\000\034\004" +
    "\uff8e\012\uff8e\013\uff8e\015\uff8e\017\uff8e\043\uff8e\050\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\057\uff8e\060\uff8e\001" +
    "\002\000\004\015\173\001\002\000\034\004\uff8f\012\uff8f" +
    "\013\uff8f\015\uff8f\017\uff8f\043\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\057\uff8f\060\uff8f\001\002\000\040" +
    "\014\072\036\100\037\124\040\107\041\077\042\062\046" +
    "\106\047\075\052\073\055\070\063\114\064\071\065\130" +
    "\066\074\067\065\001\002\000\026\012\136\017\176\043" +
    "\137\050\141\051\146\052\142\053\145\054\135\057\144" +
    "\060\143\001\002\000\040\014\072\036\100\037\124\040" +
    "\107\041\077\042\062\046\106\047\075\052\073\055\070" +
    "\063\114\064\071\065\130\066\074\067\065\001\002\000" +
    "\026\012\136\015\200\043\137\050\141\051\146\052\142" +
    "\053\145\054\135\057\144\060\143\001\002\000\006\014" +
    "\uff8a\061\uff8a\001\002\000\040\014\072\036\100\037\124" +
    "\040\107\041\077\042\062\046\106\047\075\052\073\055" +
    "\070\063\114\064\071\065\130\066\074\067\065\001\002" +
    "\000\026\012\136\015\203\043\137\050\141\051\146\052" +
    "\142\053\145\054\135\057\144\060\143\001\002\000\006" +
    "\014\uff8b\061\uff8b\001\002\000\026\012\136\013\205\043" +
    "\137\050\141\051\146\052\142\053\145\054\135\057\144" +
    "\060\143\001\002\000\036\004\uff92\012\uff92\013\uff92\015" +
    "\uff92\017\uff92\035\uff92\043\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\057\uff92\060\uff92\001\002\000\034\004" +
    "\uffa4\012\136\013\uffa4\015\uffa4\017\uffa4\043\137\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\057\uffa4\060\uffa4\001" +
    "\002\000\034\004\uff91\012\uff91\013\uff91\015\uff91\017\uff91" +
    "\043\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\057" +
    "\uff91\060\uff91\001\002\000\004\015\211\001\002\000\004" +
    "\004\212\001\002\000\066\004\uffad\014\uffad\021\uffad\022" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\046" +
    "\uffad\047\uffad\052\uffad\055\uffad\062\uffad\063\uffad\064\uffad" +
    "\065\uffad\066\uffad\067\uffad\001\002\000\004\065\214\001" +
    "\002\000\004\015\215\001\002\000\034\004\uff9b\012\uff9b" +
    "\013\uff9b\015\uff9b\017\uff9b\043\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\057\uff9b\060\uff9b\001\002\000\112" +
    "\002\uffca\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\014\uffca\016\uffca\020\uffca\021\uffca\022\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\046\uffca\047\uffca\052\uffca\055\uffca\062\uffca\063\uffca\064" +
    "\uffca\065\uffca\066\uffca\067\uffca\001\002\000\010\015\uffef" +
    "\056\uffef\065\uffef\001\002\000\010\004\ufff5\015\ufff5\017" +
    "\ufff5\001\002\000\004\022\uffc6\001\002\000\042\004\uffba" +
    "\014\072\036\100\037\124\040\107\041\077\042\062\046" +
    "\106\047\075\052\073\055\070\063\114\064\071\065\130" +
    "\066\074\067\065\001\002\000\030\004\uffbb\012\136\015" +
    "\uffbb\043\137\050\141\051\146\052\142\053\145\054\135" +
    "\057\144\060\143\001\002\000\004\004\225\001\002\000" +
    "\040\014\072\036\100\037\124\040\107\041\077\042\062" +
    "\046\106\047\075\052\073\055\070\063\114\064\071\065" +
    "\130\066\074\067\065\001\002\000\026\004\227\012\136" +
    "\043\137\050\141\051\146\052\142\053\145\054\135\057" +
    "\144\060\143\001\002\000\042\014\072\015\uffba\036\100" +
    "\037\124\040\107\041\077\042\062\046\106\047\075\052" +
    "\073\055\070\063\114\064\071\065\130\066\074\067\065" +
    "\001\002\000\004\015\231\001\002\000\062\004\uffb1\014" +
    "\uffb1\021\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\046" +
    "\uffb1\047\uffb1\052\uffb1\055\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\001\002\000\062\004\101\014" +
    "\072\021\055\026\110\030\067\031\116\032\111\033\104" +
    "\034\125\036\100\037\124\040\107\041\077\042\062\046" +
    "\106\047\075\052\073\055\070\062\056\063\114\064\071" +
    "\065\130\066\074\067\065\001\002\000\066\004\uffb0\014" +
    "\uffb0\021\uffb0\022\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\046\uffb0\047\uffb0\052\uffb0\055\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\001\002\000" +
    "\040\014\072\036\100\037\124\040\107\041\077\042\062" +
    "\046\106\047\075\052\073\055\070\063\114\064\071\065" +
    "\130\066\074\067\065\001\002\000\034\004\uffaa\012\136" +
    "\013\uffaa\015\uffaa\017\uffaa\043\137\050\141\051\146\052" +
    "\142\053\145\054\135\057\144\060\143\001\002\000\066" +
    "\004\uffc4\014\uffc4\021\uffc4\022\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\046\uffc4\047\uffc4\052\uffc4\055" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\001\002\000\004\004\240\001\002\000\066\004\uffaf\014" +
    "\uffaf\021\uffaf\022\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\046\uffaf\047\uffaf\052\uffaf\055\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\001\002\000" +
    "\040\014\072\036\100\037\124\040\107\041\077\042\062" +
    "\046\106\047\075\052\073\055\070\063\114\064\071\065" +
    "\130\066\074\067\065\001\002\000\026\012\136\015\243" +
    "\043\137\050\141\051\146\052\142\053\145\054\135\057" +
    "\144\060\143\001\002\000\062\004\uffb9\014\uffb9\021\uffb9" +
    "\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\046\uffb9\047\uffb9" +
    "\052\uffb9\055\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\001\002\000\062\004\101\014\072\021\055" +
    "\026\110\030\067\031\116\032\111\033\104\034\125\036" +
    "\100\037\124\040\107\041\077\042\062\046\106\047\075" +
    "\052\073\055\070\062\056\063\114\064\071\065\130\066" +
    "\074\067\065\001\002\000\066\004\uffb8\014\uffb8\021\uffb8" +
    "\022\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\046\uffb8\047\uffb8\052\uffb8\055\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\067\uffb8\001\002\000\066\004\uffb4" +
    "\014\uffb4\021\uffb4\022\uffb4\026\uffb4\027\247\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\046\uffb4\047\uffb4\052\uffb4\055\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002" +
    "\000\062\004\uffb6\014\uffb6\021\uffb6\026\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\046\uffb6\047\uffb6\052\uffb6\055\uffb6\062" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002" +
    "\000\066\004\uffb7\014\uffb7\021\uffb7\022\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\046\uffb7\047\uffb7\052" +
    "\uffb7\055\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\001\002\000\062\004\101\014\072\021\055\026" +
    "\110\030\067\031\116\032\111\033\104\034\125\036\100" +
    "\037\124\040\107\041\077\042\062\046\106\047\075\052" +
    "\073\055\070\062\056\063\114\064\071\065\130\066\074" +
    "\067\065\001\002\000\066\004\uffb5\014\uffb5\021\uffb5\022" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\046" +
    "\uffb5\047\uffb5\052\uffb5\055\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\001\002\000\040\014\072\036" +
    "\100\037\124\040\107\041\077\042\062\046\106\047\075" +
    "\052\073\055\070\063\114\064\071\065\130\066\074\067" +
    "\065\001\002\000\026\012\136\017\255\043\137\050\141" +
    "\051\146\052\142\053\145\054\135\057\144\060\143\001" +
    "\002\000\014\006\004\007\025\010\021\011\010\065\011" +
    "\001\002\000\006\015\257\056\217\001\002\000\034\004" +
    "\uff9a\012\uff9a\013\uff9a\015\uff9a\017\uff9a\043\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\057\uff9a\060\uff9a\001" +
    "\002\000\066\004\uffae\014\uffae\021\uffae\022\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\046\uffae\047\uffae" +
    "\052\uffae\055\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\001\002\000\004\015\263\001\002\000\034" +
    "\004\uff98\012\uff98\013\uff98\015\uff98\017\uff98\043\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\057\uff98\060\uff98" +
    "\001\002\000\034\004\uff99\012\uff99\013\uff99\015\uff99\017" +
    "\uff99\043\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\057\uff99\060\uff99\001\002\000\004\015\266\001\002\000" +
    "\034\004\uff97\012\uff97\013\uff97\015\uff97\017\uff97\043\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\057\uff97\060" +
    "\uff97\001\002\000\034\004\uff96\012\uff96\013\uff96\015\uff96" +
    "\017\uff96\043\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\057\uff96\060\uff96\001\002\000\034\004\uff9d\012\136" +
    "\013\uff9d\015\uff9d\017\uff9d\043\137\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\057\uff9d\060\uff9d\001\002\000\026" +
    "\012\136\015\271\043\137\050\141\051\146\052\142\053" +
    "\145\054\135\057\144\060\143\001\002\000\034\004\uffa5" +
    "\012\uffa5\013\uffa5\015\uffa5\017\uffa5\043\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\057\uffa5\060\uffa5\001\002" +
    "\000\034\004\uff9c\012\136\013\uff9c\015\uff9c\017\uff9c\043" +
    "\137\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\057\uff9c" +
    "\060\uff9c\001\002\000\040\014\072\036\100\037\124\040" +
    "\107\041\077\042\062\046\106\047\075\052\073\055\070" +
    "\063\114\064\071\065\130\066\074\067\065\001\002\000" +
    "\026\012\136\015\275\043\137\050\141\051\146\052\142" +
    "\053\145\054\135\057\144\060\143\001\002\000\062\004" +
    "\uffb3\014\uffb3\021\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\046\uffb3\047\uffb3\052\uffb3\055\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\001\002\000\062\004" +
    "\101\014\072\021\055\026\110\030\067\031\116\032\111" +
    "\033\104\034\125\036\100\037\124\040\107\041\077\042" +
    "\062\046\106\047\075\052\073\055\070\062\056\063\114" +
    "\064\071\065\130\066\074\067\065\001\002\000\066\004" +
    "\uffb2\014\uffb2\021\uffb2\022\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\046\uffb2\047\uffb2\052\uffb2\055\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001" +
    "\002\000\040\014\072\036\100\037\124\040\107\041\077" +
    "\042\062\046\106\047\075\052\073\055\070\063\114\064" +
    "\071\065\130\066\074\067\065\001\002\000\026\012\136" +
    "\015\302\043\137\050\141\051\146\052\142\053\145\054" +
    "\135\057\144\060\143\001\002\000\034\004\uff95\012\uff95" +
    "\013\uff95\015\uff95\017\uff95\043\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\057\uff95\060\uff95\001\002\000\020" +
    "\005\014\006\004\007\025\010\021\011\010\015\uffe3\065" +
    "\011\001\002\000\006\015\uffe1\017\311\001\002\000\004" +
    "\015\306\001\002\000\006\021\uffea\062\uffea\001\002\000" +
    "\006\021\055\062\056\001\002\000\032\002\uffe9\003\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\016\uffe9\020" +
    "\uffe9\022\uffe9\025\uffe9\065\uffe9\001\002\000\016\005\014" +
    "\006\004\007\025\010\021\011\010\065\011\001\002\000" +
    "\004\015\uffe4\001\002\000\006\015\uffe1\017\311\001\002" +
    "\000\004\015\uffe2\001\002\000\110\002\ufff7\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\046\ufff7\047\ufff7\052\ufff7\055" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\001\002\000\030\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\016\ufff9\020\ufff9\025\ufff9\065\ufff9" +
    "\001\002\000\030\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\016\ufff8\020\ufff8\025\ufff8\065\ufff8" +
    "\001\002\000\006\056\217\065\321\001\002\000\004\035" +
    "\322\001\002\000\014\046\106\063\114\064\071\066\074" +
    "\067\065\001\002\000\010\004\ufff6\015\ufff6\017\ufff6\001" +
    "\002\000\006\021\325\062\326\001\002\000\020\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\016\uffd3\022\uffd3\065\uffd3\001" +
    "\002\000\030\002\uffd1\003\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\016\uffd1\020\uffd1\025\uffd1\065\uffd1\001" +
    "\002\000\020\006\uffcf\007\uffcf\010\uffcf\011\uffcf\016\uffcf" +
    "\022\uffcf\065\uffcf\001\002\000\020\006\004\007\025\010" +
    "\021\011\010\016\333\022\331\065\011\001\002\000\030" +
    "\002\uffd2\003\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\016\uffd2\020\uffd2\025\uffd2\065\uffd2\001\002\000\006" +
    "\056\217\065\344\001\002\000\004\065\335\001\002\000" +
    "\020\006\uffd0\007\uffd0\010\uffd0\011\uffd0\016\uffd0\022\uffd0" +
    "\065\uffd0\001\002\000\006\014\336\061\337\001\002\000" +
    "\020\005\014\006\004\007\025\010\021\011\010\015\uffe3" +
    "\065\011\001\002\000\004\004\340\001\002\000\020\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\016\uffcb\022\uffcb\065\uffcb" +
    "\001\002\000\004\015\342\001\002\000\004\004\343\001" +
    "\002\000\020\006\uffcd\007\uffcd\010\uffcd\011\uffcd\016\uffcd" +
    "\022\uffcd\065\uffcd\001\002\000\006\014\345\061\346\001" +
    "\002\000\020\005\014\006\004\007\025\010\021\011\010" +
    "\015\uffe3\065\011\001\002\000\004\004\347\001\002\000" +
    "\020\006\uffcc\007\uffcc\010\uffcc\011\uffcc\016\uffcc\022\uffcc" +
    "\065\uffcc\001\002\000\004\015\351\001\002\000\004\004" +
    "\352\001\002\000\020\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\016\uffce\022\uffce\065\uffce\001\002\000\010\004\ufff5\014" +
    "\354\061\355\001\002\000\020\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\015\uffee\065\uffee\001\002\000\006\021" +
    "\uffe8\062\uffe8\001\002\000\006\021\055\062\056\001\002" +
    "\000\032\002\uffe7\003\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\016\uffe7\020\uffe7\022\uffe7\025\uffe7\065\uffe7" +
    "\001\002\000\020\005\014\006\004\007\025\010\021\011" +
    "\010\015\uffe3\065\011\001\002\000\004\015\362\001\002" +
    "\000\006\021\uffed\062\uffed\001\002\000\006\021\055\062" +
    "\056\001\002\000\032\002\uffec\003\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\016\uffec\020\uffec\022\uffec\025" +
    "\uffec\065\uffec\001\002\000\030\002\000\003\015\005\014" +
    "\006\004\007\025\010\021\011\010\016\020\020\023\025" +
    "\013\065\011\001\002\000\030\002\uffff\003\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\016\uffff\020\uffff\025" +
    "\uffff\065\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\022\002\023\004\005\005\021\007\015\010" +
    "\006\011\016\014\004\022\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\027\001\001\000\004\016\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\041\001\001\000\004" +
    "\017\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\043\001\001\000\014\005\045\007" +
    "\015\010\006\011\047\020\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\302\001\001\000\004\054\053" +
    "\001\001\000\004\025\056\001\001\000\004\006\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\114" +
    "\007\015\010\117\025\102\026\116\027\120\030\104\032" +
    "\075\033\063\034\060\035\122\036\065\037\111\042\112" +
    "\043\121\046\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\271\042" +
    "\112\043\121\046\062\001\001\000\002\001\001\000\012" +
    "\037\267\042\112\043\121\046\062\001\001\000\012\037" +
    "\266\042\112\043\121\046\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\222" +
    "\040\236\042\112\043\121\046\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\025\102\026\116\027\220\030" +
    "\104\032\075\033\063\034\060\035\122\036\065\037\111" +
    "\042\112\043\121\046\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\037\126\042\112\043" +
    "\121\046\062\001\001\000\004\041\207\001\001\000\002" +
    "\001\001\000\014\037\133\042\112\043\121\045\132\046" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\137\001\001\000\012\037\205\042\112\043\121\046" +
    "\062\001\001\000\012\037\203\042\112\043\121\046\062" +
    "\001\001\000\004\044\162\001\001\000\002\001\001\000" +
    "\012\037\156\042\112\043\121\046\062\001\001\000\012" +
    "\037\155\042\112\043\121\046\062\001\001\000\012\037" +
    "\154\042\112\043\121\046\062\001\001\000\012\037\153" +
    "\042\112\043\121\046\062\001\001\000\012\037\152\042" +
    "\112\043\121\046\062\001\001\000\012\037\151\042\112" +
    "\043\121\046\062\001\001\000\012\037\147\042\112\043" +
    "\121\046\062\001\001\000\004\041\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\133\042\112\043\121\045\165" +
    "\046\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\037\133\042\112\043\121\045\171" +
    "\046\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\037\174\042\112\043\121\046\062" +
    "\001\001\000\002\001\001\000\012\037\176\042\112\043" +
    "\121\046\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\201\042\112\043\121\046\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\037\222\040\223\042\112\043\121\046\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\225\042\112" +
    "\043\121\046\062\001\001\000\002\001\001\000\014\037" +
    "\222\040\227\042\112\043\121\046\062\001\001\000\002" +
    "\001\001\000\004\063\231\001\001\000\032\025\102\026" +
    "\232\030\104\032\075\033\063\034\060\035\122\036\065" +
    "\037\111\042\112\043\121\046\062\001\001\000\002\001" +
    "\001\000\012\037\234\042\112\043\121\046\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\037\241\042\112\043\121\046\062" +
    "\001\001\000\002\001\001\000\004\057\243\001\001\000" +
    "\032\025\102\026\244\030\104\032\075\033\063\034\060" +
    "\035\122\036\065\037\111\042\112\043\121\046\062\001" +
    "\001\000\004\060\245\001\001\000\004\031\247\001\001" +
    "\000\004\061\250\001\001\000\002\001\001\000\032\025" +
    "\102\026\251\030\104\032\075\033\063\034\060\035\122" +
    "\036\065\037\111\042\112\043\121\046\062\001\001\000" +
    "\002\001\001\000\012\037\253\042\112\043\121\046\062" +
    "\001\001\000\002\001\001\000\004\010\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\037\273\042\112\043\121\046\062\001\001\000\002" +
    "\001\001\000\004\062\275\001\001\000\032\025\102\026" +
    "\276\030\104\032\075\033\063\034\060\035\122\036\065" +
    "\037\111\042\112\043\121\046\062\001\001\000\002\001" +
    "\001\000\012\037\300\042\112\043\121\046\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\303\010" +
    "\117\012\304\001\001\000\004\013\311\001\001\000\002" +
    "\001\001\000\004\052\306\001\001\000\004\025\307\001" +
    "\001\000\002\001\001\000\006\007\312\010\117\001\001" +
    "\000\002\001\001\000\004\013\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\326" +
    "\001\001\000\002\001\001\000\004\024\327\001\001\000" +
    "\006\010\331\023\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\303\010\117\012\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\303" +
    "\010\117\012\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\357\001\001\000\004\053" +
    "\355\001\001\000\004\025\356\001\001\000\002\001\001" +
    "\000\010\007\303\010\117\012\360\001\001\000\002\001" +
    "\001\000\004\050\362\001\001\000\004\025\363\001\001" +
    "\000\002\001\001\000\020\004\365\005\021\007\015\010" +
    "\006\011\016\014\004\022\011\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Hashtable<String, symbol> symbolTable = new Hashtable<String, symbol>();
    public static List<logs> Log = new  ArrayList<logs>();
    
    public ArrayList<String> SyntacticErrors = new ArrayList<String>();
    public int count = 0;

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m*** Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        System.out.println("\033[31m*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
        SyntacticErrors.add("\033[31m1*** Error Sintactico No Recuperado. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' *** Mensaje Error: Simbolo no reconocido.");
    }

    public Hashtable<String, symbol> getHashTable(){
         return symbolTable;
     }
     
     public List<logs> getLog (){
         return Log;
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


                Diccionario exec = new Diccionario();

                public int context = 0, cMin = 0, ambito = 0;
                public String parametros = "", clase = "null", val = "$", cls = "$";
            
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Constant ::= sNull 
            {
              Object RESULT =null;
		 Sintactico.symbolTable.put("null", new symbol("null", "string", ambito, clase, "null")); RESULT = "null";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Constant ::= stringConstant 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Sintactico.symbolTable.put(valor, new symbol(valor.toString(), "string", ambito, clase, valor)); RESULT = valor;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Constant ::= boolConstant 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Sintactico.symbolTable.put(valor.toString(), new symbol(valor.toString(), "bool", ambito, clase, valor.toString())); RESULT = valor.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Constant ::= doubleConstant 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		double valor = (double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Sintactico.symbolTable.put(Double.toString(valor), new symbol(Double.toString(valor), "double", ambito, clase, Double.toString(valor))); RESULT = Double.toString(valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Constant ::= integerConstant 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Sintactico.symbolTable.put(valor.toString(), new symbol(valor.toString(), "int", ambito, clase, valor.toString())); RESULT = valor.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Actuals ::= Expr ExprRepeat 
            {
              Object RESULT =null;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object simbolo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            if(exec.AlreadyExists(Sintactico.symbolTable, simbolo.toString(), ambito, cMin)){
                symbol s = exec.FindSymbol(Sintactico.symbolTable, simbolo.toString(), ambito, cMin);
                parametros = s.type + "$";
            }else 
                System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo.toString() +" DOES NOT EXIST***");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LibCall ::= sSetByte OpeningParenthesis Expr comma Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LibCall ::= sGetByte OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Call ::= Expr dot LibCall Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Call ::= Expr dot LibCall OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Call ::= Expr dot ident Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Call ::= Expr dot ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Call ::= ident Parenthesis 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            if(!exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" DOES NOT EXIST***");
            }
            RESULT = nombre.toString();       
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Call ::= ident OpeningParenthesis Actuals ClosedParenthesis 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 
            if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                symbol s = exec.FindFunction(Sintactico.symbolTable, nombre.toString());
                if(s.parametros != parametros){
                    System.out.println("\033[31m***ERROR: "+ nombre.toString() +" PARAMETERS DO NOT MATCH.***");
                }
            }
            else
                System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" DOES NOT EXIST***");
            parametros = "";
            RESULT = nombre.toString();       
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LValue ::= Expr OpeningBracket Expr ClosedBracket 
            {
              Object RESULT =null;
		int simbolo1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int simbolo1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object simbolo1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int simbolo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int simbolo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object simbolo2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                if(exec.AlreadyExists(Sintactico.symbolTable, simbolo1.toString(), ambito, cMin)){
                    if(exec.AlreadyExists(Sintactico.symbolTable, simbolo2.toString(), ambito, cMin)){
                        val = "array";
                        symbol s = exec.FindSymbol(Sintactico.symbolTable, simbolo2.toString(), ambito, cMin);
                        cls = s.value;
                    }
                    else 
                     System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo2.toString() +" DOES NOT EXIST***");
                }
                else 
                     System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo1.toString() +" DOES NOT EXIST***");
                 RESULT = simbolo1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LValue ::= Expr dot ident 
            {
              Object RESULT =null;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object simbolo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                if(exec.AlreadyExists(Sintactico.symbolTable, simbolo.toString(), ambito, cMin)){
                    if(exec.FindInLogs(Sintactico.Log, nombre, simbolo.toString())){
                        val = "log";
                        cls = simbolo.toString();
                    }
                    else
                         System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" DOES NOT EXIST***");
                }
                else 
                     System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" DOES NOT EXIST***");
                 RESULT = nombre.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LValue ::= ident 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                     
                }
                else
                    System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" IS ALREADY EXIST***");
                RESULT = nombre.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= sMalloc OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= sReadLine OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= sReadLine Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= sReadInteger Parenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= sReadInteger OpeningParenthesis ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= sNewArray OpeningParenthesis Expr comma Type ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= sNew OpeningParenthesis ident ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= denial Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr ComparisonOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr equality Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr or Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr and Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr negative Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr sum Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr ArithmeticOperators Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= OpeningParenthesis Expr ClosedParenthesis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= sThis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= LValue 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = nombre.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Constant 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = valor.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= LValue assignment Expr 
            {
              Object RESULT =null;
		int nombre1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombre1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object nombre1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombre2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombre2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object nombre2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExprRepeat ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExprRepeat ::= comma Expr ExprRepeat 
            {
              Object RESULT =null;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object simbolo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            if(exec.AlreadyExists(Sintactico.symbolTable, simbolo.toString(), ambito, cMin)){
                symbol s = exec.FindSymbol(Sintactico.symbolTable, simbolo.toString(), ambito, cMin);
                parametros = s.type + "$";
            }else 
                System.out.println("\033[31m***ERROR: SYMBOL "+ simbolo.toString() +" DOES NOT EXIST***");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprRepeat",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrintStmt ::= sPrint OpeningParenthesis Expr ExprRepeat ClosedParenthesis pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BreakStmt ::= sBreak pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ReturnStmt ::= sReturn ExprOZ pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ForStmt ::= lFor OpeningParenthesis ExprOZ pyc Expr pyc ExprOZ ClosedParenthesis NT$12 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$12 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // WhileStmt ::= lWhile OpeningParenthesis Expr ClosedParenthesis NT$11 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$11 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ElseStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ElseStmt ::= cElse NT$10 Stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseStmt",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$10 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IfStmt ::= cIf OpeningParenthesis Expr ClosedParenthesis NT$8 Stmt NT$9 ElseStmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$8 ::= 
            {
              Object RESULT =null;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExprOZ ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprOZ ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprOZ",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= Expr pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StmtAux ::= Stmt StmtAux 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtAux",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VariableDeclAux ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VariableDeclAux ::= VariableDeclAux VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDeclAux",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StmtBlock ::= CurlyBrackets 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtBlock ::= OpeningCurlyBracket VariableDeclAux StmtAux ClosedCurlyBracket 
            {
              Object RESULT =null;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Prototype ::= sVoid ident Parenthesis pyc 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    symbol s = new symbol(nombre.toString(), "method", ambito, clase);
                    s.AddFunction("method", parametros);
                    Sintactico.symbolTable.put(nombre.toString(), s);
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                    parametros = "";
                }

             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Prototype ::= Type ident Parenthesis pyc 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Prototype ::= sVoid ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", ambito , clase);
                        s.AddFunction("void", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Prototype ::= Type ident OpeningParenthesis Formals ClosedParenthesis pyc 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RepeatablePrototype ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RepeatablePrototype ::= RepeatablePrototype Prototype 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatablePrototype",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InterfaceDecl ::= sInterface ident CurlyBrackets 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: INTERFACE "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        Sintactico.symbolTable.put(nombre.toString(), new symbol(nombre.toString(), "interface", ambito, nombre.toString()));
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "interface", "", ambito, nombre.toString()));
                    }
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InterfaceDecl ::= sInterface ident OpeningCurlyBracket NT$7 RepeatablePrototype ClosedCurlyBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito));; ambito--; clase = "null";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$7 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: INTERFACE "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        clase = nombre.toString();
                        Sintactico.symbolTable.put(clase, new symbol(clase, "interface", ambito, clase));
                        Sintactico.Log.add(new logs("INSERT", clase, "interface", "", ambito, clase));
                        ambito++; Sintactico.Log.add(new logs("Ámbito++"));
                    }
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RepeatableField ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RepeatableField ::= RepeatableField Field 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatableField",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MultipleIdents ::= MultipleIdents comma ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MultipleIdents ::= ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MultipleIdents",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ImpIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ImpIdent ::= sImplements MultipleIdents 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpIdent",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExtIdent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExtIdent ::= sExtends ident 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExtIdent",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDecl ::= sClass ident ExtIdent ImpIdent CurlyBrackets 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                    Sintactico.symbolTable.put(nombre.toString(), new symbol(nombre.toString(), "class", ambito, nombre.toString()));
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "class", "", ambito, nombre.toString()));
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl ::= sClass ident ExtIdent ImpIdent NT$6 OpeningCurlyBracket RepeatableField ClosedCurlyBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 Sintactico.symbolTable = exec.DeleteAmbit(Sintactico.symbolTable, ambito); Sintactico.Log.add(new logs ("DELETE Ámbito"+ambito)); ambito--; clase = "null"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: CLASS "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        clase = nombre.toString();
                        Sintactico.symbolTable.put(clase, new symbol(clase, "class", ambito, clase));
                        Sintactico.Log.add(new logs("INSERT", clase, "class", "", ambito, clase));
                        ambito++; Sintactico.Log.add(new logs("Ámbito++"));
                    }
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RepeatVariable ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RepeatVariable ::= comma Variable RepeatVariable 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            parametros += tipo.toString()+"$";
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RepeatVariable",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Formals ::= Variable RepeatVariable 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            parametros += tipo.toString()+"$"; 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FunctionDecl ::= sVoid ident Parenthesis NT$5 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", ambito, clase);
                        s.AddFunction("method", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunctionDecl ::= Type ident Parenthesis NT$4 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", ambito, clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, ambito, clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FunctionDecl ::= sVoid ident OpeningParenthesis NT$2 Formals ClosedParenthesis NT$3 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: METHOD "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "method", (ambito - 1), clase);
                        s.AddFunction("void", parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "method", "void", parametros, (ambito - 1), clase));
                        Sintactico.Log.add(new logs("Ámbito++"));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= Type ident OpeningParenthesis NT$0 Formals ClosedParenthesis NT$1 StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
 
                    if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                        System.out.println("\033[31m***ERROR: FUNCTION "+ nombre.toString() +" IS ALREADY EXIST***");
                    else{
                        symbol s = new symbol(nombre.toString(), "function", (ambito - 1), clase);
                        s.AddFunction(tipo.toString(), parametros);
                        Sintactico.symbolTable.put(nombre.toString(), s);
                        Sintactico.Log.add(new logs("INSERT", nombre.toString(), "function", tipo.toString(), parametros, (ambito - 1), clase));
                        parametros = "";
                    }

                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 ambito++; Sintactico.Log.add(new logs("Ámbito++")); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= Type Brackets 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = tipo+"[]"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= ident 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
             if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin)){
                RESULT = nombre.toString(); 
             }
             else{
                System.out.println("\033[31m***ERROR: IDENTIFIER "+ nombre.toString() +" DOES NOT EXIST***");
                //throw new Error("Impossible to continue.");
                //RESULT = "";
             }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= Type ident 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    Sintactico.symbolTable.put(nombre.toString(), new symbol (nombre.toString(), tipo.toString(), ambito, clase));
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), tipo.toString(), "", ambito, clase));
                } 
                RESULT = tipo.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= CONST Type ident assignment Constant 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                if(exec.AlreadyExists(Sintactico.symbolTable, nombre.toString(), ambito, cMin))
                    System.out.println("\033[31m***ERROR: SYMBOL "+ nombre.toString() +" IS ALREADY EXIST***");
                else{
                    symbol s = new symbol (nombre.toString(), "const " + tipo.toString(), ambito, clase);
                    s.constante = true;
                    s.SymbolValue(valor.toString());    
                    Sintactico.symbolTable.put(nombre.toString(), s);
                    Sintactico.Log.add(new logs("INSERT", nombre.toString(), "const " + tipo.toString(), valor.toString(), ambito, clase));
                } 
                RESULT = tipo.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error ClosedCurlyBracket 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramA ::= ProgramA Decl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProgramA",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl ProgramA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

